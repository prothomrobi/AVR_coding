
serialCom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  00001050  000010e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001050  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800240  00800240  00001124  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f47d  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002694  00000000  00000000  00010bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f16  00000000  00000000  00013245  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001450  00000000  00000000  0001615c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002537  00000000  00000000  000175ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007cb5  00000000  00000000  00019ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  00021798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
       a:	00 00       	nop
       c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
      12:	00 00       	nop
      14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
      22:	00 00       	nop
      24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
      32:	00 00       	nop
      34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
      4e:	00 00       	nop
      50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
      52:	00 00       	nop
      54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
      56:	00 00       	nop
      58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	05 c4       	rjmp	.+2058   	; 0x868 <__vector_23>
      5e:	00 00       	nop
      60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c2       	rjmp	.+1120   	; 0x4c6 <__vector_25>
      66:	00 00       	nop
      68:	64 c2       	rjmp	.+1224   	; 0x532 <__vector_26>
      6a:	00 00       	nop
      6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
      72:	00 00       	nop
      74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
      76:	00 00       	nop
      78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
      7e:	00 00       	nop
      80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
      82:	00 00       	nop
      84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
      8e:	00 00       	nop
      90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
      92:	00 00       	nop
      94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
      96:	00 00       	nop
      98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
      be:	00 00       	nop
      c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
      da:	00 00       	nop
      dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
      de:	00 00       	nop
      e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	cb 02       	muls	r28, r27

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e0 e5       	ldi	r30, 0x50	; 80
      fe:	f0 e1       	ldi	r31, 0x10	; 16
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a0 34       	cpi	r26, 0x40	; 64
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	a0 e4       	ldi	r26, 0x40	; 64
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	aa 3e       	cpi	r26, 0xEA	; 234
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	38 d5       	rcall	.+2672   	; 0xba4 <__tablejump2__>
     134:	c2 37       	cpi	r28, 0x72	; 114
     136:	d1 07       	cpc	r29, r17
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 07       	cpc	r16, r24
     13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
     13e:	59 d2       	rcall	.+1202   	; 0x5f2 <main>
     140:	85 c7       	rjmp	.+3850   	; 0x104c <_exit>

00000142 <__bad_interrupt>:
     142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     144:	26 e0       	ldi	r18, 0x06	; 6
     146:	40 e8       	ldi	r20, 0x80	; 128
     148:	55 e2       	ldi	r21, 0x25	; 37
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	80 e4       	ldi	r24, 0x40	; 64
     150:	92 e0       	ldi	r25, 0x02	; 2
     152:	56 c1       	rjmp	.+684    	; 0x400 <_ZN14HardwareSerial5beginEmh>

00000154 <loop>:

void setup() {
  Serial.begin(9600);
}

void loop() {
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	00 d0       	rcall	.+0      	; 0x162 <loop+0xe>
     162:	00 d0       	rcall	.+0      	; 0x164 <loop+0x10>
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
 while(Serial.available() == 0){};
     168:	80 e4       	ldi	r24, 0x40	; 64
     16a:	92 e0       	ldi	r25, 0x02	; 2
     16c:	48 d0       	rcall	.+144    	; 0x1fe <_ZN14HardwareSerial9availableEv>
     16e:	89 2b       	or	r24, r25
     170:	d9 f3       	breq	.-10     	; 0x168 <loop+0x14>

 String value = Serial.readString();
     172:	60 e4       	ldi	r22, 0x40	; 64
     174:	72 e0       	ldi	r23, 0x02	; 2
     176:	ce 01       	movw	r24, r28
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	5f d3       	rcall	.+1726   	; 0x83a <_ZN6Stream10readStringEv>
 int val = value.toInt();
     17c:	ce 01       	movw	r24, r28
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	e5 d4       	rcall	.+2506   	; 0xb4c <_ZNK6String5toIntEv>
     182:	6b 01       	movw	r12, r22
     184:	7c 01       	movw	r14, r24
 Serial.print("\nDEC: ");
     186:	66 e0       	ldi	r22, 0x06	; 6
     188:	72 e0       	ldi	r23, 0x02	; 2
     18a:	80 e4       	ldi	r24, 0x40	; 64
     18c:	92 e0       	ldi	r25, 0x02	; 2
     18e:	7a d2       	rcall	.+1268   	; 0x684 <_ZN5Print5printEPKc>
 Serial.println(val);
     190:	4a e0       	ldi	r20, 0x0A	; 10
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	b6 01       	movw	r22, r12
     196:	80 e4       	ldi	r24, 0x40	; 64
     198:	92 e0       	ldi	r25, 0x02	; 2
     19a:	11 d3       	rcall	.+1570   	; 0x7be <_ZN5Print7printlnEii>
  Serial.print("BIN: ");
     19c:	6d e0       	ldi	r22, 0x0D	; 13
     19e:	72 e0       	ldi	r23, 0x02	; 2
     1a0:	80 e4       	ldi	r24, 0x40	; 64
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	6f d2       	rcall	.+1246   	; 0x684 <_ZN5Print5printEPKc>
 Serial.println(val, BIN);
     1a6:	42 e0       	ldi	r20, 0x02	; 2
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	b6 01       	movw	r22, r12
     1ac:	80 e4       	ldi	r24, 0x40	; 64
     1ae:	92 e0       	ldi	r25, 0x02	; 2
     1b0:	06 d3       	rcall	.+1548   	; 0x7be <_ZN5Print7printlnEii>
 Serial.print("OCT: ");
     1b2:	63 e1       	ldi	r22, 0x13	; 19
     1b4:	72 e0       	ldi	r23, 0x02	; 2
     1b6:	80 e4       	ldi	r24, 0x40	; 64
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	64 d2       	rcall	.+1224   	; 0x684 <_ZN5Print5printEPKc>
 Serial.println(val, OCT);
     1bc:	48 e0       	ldi	r20, 0x08	; 8
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	b6 01       	movw	r22, r12
     1c2:	80 e4       	ldi	r24, 0x40	; 64
     1c4:	92 e0       	ldi	r25, 0x02	; 2
     1c6:	fb d2       	rcall	.+1526   	; 0x7be <_ZN5Print7printlnEii>
   Serial.print("HEX: ");
     1c8:	69 e1       	ldi	r22, 0x19	; 25
     1ca:	72 e0       	ldi	r23, 0x02	; 2
     1cc:	80 e4       	ldi	r24, 0x40	; 64
     1ce:	92 e0       	ldi	r25, 0x02	; 2
 Serial.println(val, HEX);
     1d0:	59 d2       	rcall	.+1202   	; 0x684 <_ZN5Print5printEPKc>
     1d2:	40 e1       	ldi	r20, 0x10	; 16
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	b6 01       	movw	r22, r12
     1d8:	80 e4       	ldi	r24, 0x40	; 64
     1da:	92 e0       	ldi	r25, 0x02	; 2
     1dc:	f0 d2       	rcall	.+1504   	; 0x7be <_ZN5Print7printlnEii>
}

void loop() {
 while(Serial.available() == 0){};

 String value = Serial.readString();
     1de:	ce 01       	movw	r24, r28
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	fa d3       	rcall	.+2036   	; 0x9d8 <_ZN6StringD1Ev>
     1e4:	26 96       	adiw	r28, 0x06	; 6
 Serial.println(val, BIN);
 Serial.print("OCT: ");
 Serial.println(val, OCT);
   Serial.print("HEX: ");
 Serial.println(val, HEX);
}
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	f8 94       	cli
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     1fe:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     200:	91 8d       	ldd	r25, Z+25	; 0x19
     202:	22 8d       	ldd	r18, Z+26	; 0x1a
     204:	89 2f       	mov	r24, r25
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	80 5c       	subi	r24, 0xC0	; 192
     20a:	9f 4f       	sbci	r25, 0xFF	; 255
     20c:	82 1b       	sub	r24, r18
     20e:	91 09       	sbc	r25, r1
}
     210:	8f 73       	andi	r24, 0x3F	; 63
     212:	99 27       	eor	r25, r25
     214:	08 95       	ret

00000216 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     216:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     218:	91 8d       	ldd	r25, Z+25	; 0x19
     21a:	82 8d       	ldd	r24, Z+26	; 0x1a
     21c:	98 17       	cp	r25, r24
     21e:	31 f0       	breq	.+12     	; 0x22c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     220:	82 8d       	ldd	r24, Z+26	; 0x1a
     222:	e8 0f       	add	r30, r24
     224:	f1 1d       	adc	r31, r1
     226:	85 8d       	ldd	r24, Z+29	; 0x1d
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     230:	08 95       	ret

00000232 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     232:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     234:	91 8d       	ldd	r25, Z+25	; 0x19
     236:	82 8d       	ldd	r24, Z+26	; 0x1a
     238:	98 17       	cp	r25, r24
     23a:	61 f0       	breq	.+24     	; 0x254 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     23c:	82 8d       	ldd	r24, Z+26	; 0x1a
     23e:	df 01       	movw	r26, r30
     240:	a8 0f       	add	r26, r24
     242:	b1 1d       	adc	r27, r1
     244:	5d 96       	adiw	r26, 0x1d	; 29
     246:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     248:	92 8d       	ldd	r25, Z+26	; 0x1a
     24a:	9f 5f       	subi	r25, 0xFF	; 255
     24c:	9f 73       	andi	r25, 0x3F	; 63
     24e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     258:	08 95       	ret

0000025a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     25a:	fc 01       	movw	r30, r24
     25c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     25e:	44 8d       	ldd	r20, Z+28	; 0x1c
     260:	25 2f       	mov	r18, r21
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	84 2f       	mov	r24, r20
     266:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     268:	82 1b       	sub	r24, r18
     26a:	93 0b       	sbc	r25, r19
     26c:	54 17       	cp	r21, r20
     26e:	10 f0       	brcs	.+4      	; 0x274 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     270:	cf 96       	adiw	r24, 0x3f	; 63
     272:	08 95       	ret
  return tail - head - 1;
     274:	01 97       	sbiw	r24, 0x01	; 1
}
     276:	08 95       	ret

00000278 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     278:	82 ec       	ldi	r24, 0xC2	; 194
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	89 2b       	or	r24, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_Z14serialEventRunv+0x16>
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	89 2b       	or	r24, r25
     286:	19 f0       	breq	.+6      	; 0x28e <_Z14serialEventRunv+0x16>
     288:	7d d1       	rcall	.+762    	; 0x584 <_Z17Serial0_availablev>
     28a:	81 11       	cpse	r24, r1
     28c:	25 c0       	rjmp	.+74     	; 0x2d8 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	89 2b       	or	r24, r25
     294:	41 f0       	breq	.+16     	; 0x2a6 <_Z14serialEventRunv+0x2e>
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	89 2b       	or	r24, r25
     29c:	21 f0       	breq	.+8      	; 0x2a6 <_Z14serialEventRunv+0x2e>
     29e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2a2:	81 11       	cpse	r24, r1
     2a4:	1c c0       	rjmp	.+56     	; 0x2de <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	89 2b       	or	r24, r25
     2ac:	41 f0       	breq	.+16     	; 0x2be <_Z14serialEventRunv+0x46>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	89 2b       	or	r24, r25
     2b4:	21 f0       	breq	.+8      	; 0x2be <_Z14serialEventRunv+0x46>
     2b6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2ba:	81 11       	cpse	r24, r1
     2bc:	13 c0       	rjmp	.+38     	; 0x2e4 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	89 2b       	or	r24, r25
     2c4:	a1 f0       	breq	.+40     	; 0x2ee <_Z14serialEventRunv+0x76>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	89 2b       	or	r24, r25
     2cc:	81 f0       	breq	.+32     	; 0x2ee <_Z14serialEventRunv+0x76>
     2ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2d2:	81 11       	cpse	r24, r1
     2d4:	0a c0       	rjmp	.+20     	; 0x2ea <_Z14serialEventRunv+0x72>
     2d6:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     2d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2dc:	d8 cf       	rjmp	.-80     	; 0x28e <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     2de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2e2:	e1 cf       	rjmp	.-62     	; 0x2a6 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     2e4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2e8:	ea cf       	rjmp	.-44     	; 0x2be <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     2ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     2ee:	08 95       	ret

000002f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     2f0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     2f2:	84 8d       	ldd	r24, Z+28	; 0x1c
     2f4:	df 01       	movw	r26, r30
     2f6:	a8 0f       	add	r26, r24
     2f8:	b1 1d       	adc	r27, r1
     2fa:	a3 5a       	subi	r26, 0xA3	; 163
     2fc:	bf 4f       	sbci	r27, 0xFF	; 255
     2fe:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     300:	84 8d       	ldd	r24, Z+28	; 0x1c
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	8f 73       	andi	r24, 0x3F	; 63
     308:	99 27       	eor	r25, r25
     30a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     30c:	a6 89       	ldd	r26, Z+22	; 0x16
     30e:	b7 89       	ldd	r27, Z+23	; 0x17
     310:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     312:	a0 89       	ldd	r26, Z+16	; 0x10
     314:	b1 89       	ldd	r27, Z+17	; 0x11
     316:	8c 91       	ld	r24, X
     318:	80 64       	ori	r24, 0x40	; 64
     31a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     31c:	93 8d       	ldd	r25, Z+27	; 0x1b
     31e:	84 8d       	ldd	r24, Z+28	; 0x1c
     320:	98 13       	cpse	r25, r24
     322:	06 c0       	rjmp	.+12     	; 0x330 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     324:	02 88       	ldd	r0, Z+18	; 0x12
     326:	f3 89       	ldd	r31, Z+19	; 0x13
     328:	e0 2d       	mov	r30, r0
     32a:	80 81       	ld	r24, Z
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	80 83       	st	Z, r24
     330:	08 95       	ret

00000332 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	ec 01       	movw	r28, r24
  _written = true;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     344:	9b 8d       	ldd	r25, Y+27	; 0x1b
     346:	8c 8d       	ldd	r24, Y+28	; 0x1c
     348:	98 13       	cpse	r25, r24
     34a:	05 c0       	rjmp	.+10     	; 0x356 <_ZN14HardwareSerial5writeEh+0x24>
     34c:	e8 89       	ldd	r30, Y+16	; 0x10
     34e:	f9 89       	ldd	r31, Y+17	; 0x11
     350:	80 81       	ld	r24, Z
     352:	85 fd       	sbrc	r24, 5
     354:	23 c0       	rjmp	.+70     	; 0x39c <_ZN14HardwareSerial5writeEh+0x6a>
     356:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     358:	0b 8d       	ldd	r16, Y+27	; 0x1b
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	0f 5f       	subi	r16, 0xFF	; 255
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	0f 73       	andi	r16, 0x3F	; 63
     362:	11 27       	eor	r17, r17
     364:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     366:	8c 8d       	ldd	r24, Y+28	; 0x1c
     368:	e8 12       	cpse	r14, r24
     36a:	0b c0       	rjmp	.+22     	; 0x382 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	07 fc       	sbrc	r0, 7
     370:	fa cf       	rjmp	.-12     	; 0x366 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     372:	e8 89       	ldd	r30, Y+16	; 0x10
     374:	f9 89       	ldd	r31, Y+17	; 0x11
     376:	80 81       	ld	r24, Z
     378:	85 ff       	sbrs	r24, 5
     37a:	f5 cf       	rjmp	.-22     	; 0x366 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     37c:	ce 01       	movw	r24, r28
     37e:	b8 df       	rcall	.-144    	; 0x2f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     380:	f2 cf       	rjmp	.-28     	; 0x366 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     382:	8b 8d       	ldd	r24, Y+27	; 0x1b
     384:	fe 01       	movw	r30, r28
     386:	e8 0f       	add	r30, r24
     388:	f1 1d       	adc	r31, r1
     38a:	e3 5a       	subi	r30, 0xA3	; 163
     38c:	ff 4f       	sbci	r31, 0xFF	; 255
     38e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     390:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     392:	ea 89       	ldd	r30, Y+18	; 0x12
     394:	fb 89       	ldd	r31, Y+19	; 0x13
     396:	80 81       	ld	r24, Z
     398:	80 62       	ori	r24, 0x20	; 32
     39a:	07 c0       	rjmp	.+14     	; 0x3aa <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     39c:	ee 89       	ldd	r30, Y+22	; 0x16
     39e:	ff 89       	ldd	r31, Y+23	; 0x17
     3a0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     3a2:	e8 89       	ldd	r30, Y+16	; 0x10
     3a4:	f9 89       	ldd	r31, Y+17	; 0x11
     3a6:	80 81       	ld	r24, Z
     3a8:	80 64       	ori	r24, 0x40	; 64
     3aa:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	08 95       	ret

000003be <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     3c4:	88 8d       	ldd	r24, Y+24	; 0x18
     3c6:	88 23       	and	r24, r24
     3c8:	c1 f0       	breq	.+48     	; 0x3fa <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     3ca:	ea 89       	ldd	r30, Y+18	; 0x12
     3cc:	fb 89       	ldd	r31, Y+19	; 0x13
     3ce:	80 81       	ld	r24, Z
     3d0:	85 fd       	sbrc	r24, 5
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <_ZN14HardwareSerial5flushEv+0x20>
     3d4:	a8 89       	ldd	r26, Y+16	; 0x10
     3d6:	b9 89       	ldd	r27, Y+17	; 0x11
     3d8:	8c 91       	ld	r24, X
     3da:	86 fd       	sbrc	r24, 6
     3dc:	0e c0       	rjmp	.+28     	; 0x3fa <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	07 fc       	sbrc	r0, 7
     3e2:	f5 cf       	rjmp	.-22     	; 0x3ce <_ZN14HardwareSerial5flushEv+0x10>
     3e4:	80 81       	ld	r24, Z
     3e6:	85 ff       	sbrs	r24, 5
     3e8:	f2 cf       	rjmp	.-28     	; 0x3ce <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     3ea:	a8 89       	ldd	r26, Y+16	; 0x10
     3ec:	b9 89       	ldd	r27, Y+17	; 0x11
     3ee:	8c 91       	ld	r24, X
     3f0:	85 ff       	sbrs	r24, 5
     3f2:	ed cf       	rjmp	.-38     	; 0x3ce <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     3f4:	ce 01       	movw	r24, r28
     3f6:	7c df       	rcall	.-264    	; 0x2f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     3f8:	e8 cf       	rjmp	.-48     	; 0x3ca <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
     410:	6a 01       	movw	r12, r20
     412:	7b 01       	movw	r14, r22
     414:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     416:	e8 89       	ldd	r30, Y+16	; 0x10
     418:	f9 89       	ldd	r31, Y+17	; 0x11
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     41e:	41 15       	cp	r20, r1
     420:	51 4e       	sbci	r21, 0xE1	; 225
     422:	61 05       	cpc	r22, r1
     424:	71 05       	cpc	r23, r1
     426:	a9 f0       	breq	.+42     	; 0x452 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	79 e0       	ldi	r23, 0x09	; 9
     42c:	8d e3       	ldi	r24, 0x3D	; 61
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	a7 01       	movw	r20, r14
     432:	96 01       	movw	r18, r12
     434:	95 d3       	rcall	.+1834   	; 0xb60 <__udivmodsi4>
     436:	da 01       	movw	r26, r20
     438:	c9 01       	movw	r24, r18
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	a1 09       	sbc	r26, r1
     43e:	b1 09       	sbc	r27, r1
     440:	b6 95       	lsr	r27
     442:	a7 95       	ror	r26
     444:	97 95       	ror	r25
     446:	87 95       	ror	r24
     448:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     44a:	21 15       	cp	r18, r1
     44c:	80 e1       	ldi	r24, 0x10	; 16
     44e:	38 07       	cpc	r19, r24
     450:	a0 f0       	brcs	.+40     	; 0x47a <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     452:	e8 89       	ldd	r30, Y+16	; 0x10
     454:	f9 89       	ldd	r31, Y+17	; 0x11
     456:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     458:	60 e8       	ldi	r22, 0x80	; 128
     45a:	74 e8       	ldi	r23, 0x84	; 132
     45c:	8e e1       	ldi	r24, 0x1E	; 30
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	a7 01       	movw	r20, r14
     462:	96 01       	movw	r18, r12
     464:	7d d3       	rcall	.+1786   	; 0xb60 <__udivmodsi4>
     466:	da 01       	movw	r26, r20
     468:	c9 01       	movw	r24, r18
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	a1 09       	sbc	r26, r1
     46e:	b1 09       	sbc	r27, r1
     470:	b6 95       	lsr	r27
     472:	a7 95       	ror	r26
     474:	97 95       	ror	r25
     476:	87 95       	ror	r24
     478:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     47a:	ec 85       	ldd	r30, Y+12	; 0x0c
     47c:	fd 85       	ldd	r31, Y+13	; 0x0d
     47e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     480:	ee 85       	ldd	r30, Y+14	; 0x0e
     482:	ff 85       	ldd	r31, Y+15	; 0x0f
     484:	20 83       	st	Z, r18

  _written = false;
     486:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     488:	ec 89       	ldd	r30, Y+20	; 0x14
     48a:	fd 89       	ldd	r31, Y+21	; 0x15
     48c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     48e:	ea 89       	ldd	r30, Y+18	; 0x12
     490:	fb 89       	ldd	r31, Y+19	; 0x13
     492:	80 81       	ld	r24, Z
     494:	80 61       	ori	r24, 0x10	; 16
     496:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     498:	ea 89       	ldd	r30, Y+18	; 0x12
     49a:	fb 89       	ldd	r31, Y+19	; 0x13
     49c:	80 81       	ld	r24, Z
     49e:	88 60       	ori	r24, 0x08	; 8
     4a0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     4a2:	ea 89       	ldd	r30, Y+18	; 0x12
     4a4:	fb 89       	ldd	r31, Y+19	; 0x13
     4a6:	80 81       	ld	r24, Z
     4a8:	80 68       	ori	r24, 0x80	; 128
     4aa:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     4ac:	ea 89       	ldd	r30, Y+18	; 0x12
     4ae:	fb 89       	ldd	r31, Y+19	; 0x13
     4b0:	80 81       	ld	r24, Z
     4b2:	8f 7d       	andi	r24, 0xDF	; 223
     4b4:	80 83       	st	Z, r24
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	cf 90       	pop	r12
     4c4:	08 95       	ret

000004c6 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	0b b6       	in	r0, 0x3b	; 59
     4d2:	0f 92       	push	r0
     4d4:	2f 93       	push	r18
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     4de:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <__data_end+0x10>
     4e2:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <__data_end+0x11>
     4e6:	80 81       	ld	r24, Z
     4e8:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <__data_end+0x16>
     4ec:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <__data_end+0x17>
     4f0:	82 fd       	sbrc	r24, 2
     4f2:	12 c0       	rjmp	.+36     	; 0x518 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     4f4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     4f6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <__data_end+0x19>
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     4fe:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <__data_end+0x1a>
     502:	82 17       	cp	r24, r18
     504:	51 f0       	breq	.+20     	; 0x51a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     506:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <__data_end+0x19>
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	e0 5c       	subi	r30, 0xC0	; 192
     50e:	fd 4f       	sbci	r31, 0xFD	; 253
     510:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     512:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__data_end+0x19>
     516:	01 c0       	rjmp	.+2      	; 0x51a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     518:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     51a:	ff 91       	pop	r31
     51c:	ef 91       	pop	r30
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0b be       	out	0x3b, r0	; 59
     528:	0f 90       	pop	r0
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	0f 92       	push	r0
     53a:	11 24       	eor	r1, r1
     53c:	0b b6       	in	r0, 0x3b	; 59
     53e:	0f 92       	push	r0
     540:	2f 93       	push	r18
     542:	3f 93       	push	r19
     544:	4f 93       	push	r20
     546:	5f 93       	push	r21
     548:	6f 93       	push	r22
     54a:	7f 93       	push	r23
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     558:	80 e4       	ldi	r24, 0x40	; 64
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	c9 de       	rcall	.-622    	; 0x2f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0b be       	out	0x3b, r0	; 59
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     584:	80 e4       	ldi	r24, 0x40	; 64
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	3a de       	rcall	.-908    	; 0x1fe <_ZN14HardwareSerial9availableEv>
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	89 2b       	or	r24, r25
     58e:	09 f4       	brne	.+2      	; 0x592 <_Z17Serial0_availablev+0xe>
     590:	20 e0       	ldi	r18, 0x00	; 0
}
     592:	82 2f       	mov	r24, r18
     594:	08 95       	ret

00000596 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     596:	e0 e4       	ldi	r30, 0x40	; 64
     598:	f2 e0       	ldi	r31, 0x02	; 2
     59a:	13 82       	std	Z+3, r1	; 0x03
     59c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     59e:	88 ee       	ldi	r24, 0xE8	; 232
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	a0 e0       	ldi	r26, 0x00	; 0
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	84 83       	std	Z+4, r24	; 0x04
     5a8:	95 83       	std	Z+5, r25	; 0x05
     5aa:	a6 83       	std	Z+6, r26	; 0x06
     5ac:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     5ae:	83 e2       	ldi	r24, 0x23	; 35
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24
     5b6:	85 ec       	ldi	r24, 0xC5	; 197
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	95 87       	std	Z+13, r25	; 0x0d
     5bc:	84 87       	std	Z+12, r24	; 0x0c
     5be:	84 ec       	ldi	r24, 0xC4	; 196
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	97 87       	std	Z+15, r25	; 0x0f
     5c4:	86 87       	std	Z+14, r24	; 0x0e
     5c6:	80 ec       	ldi	r24, 0xC0	; 192
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	91 8b       	std	Z+17, r25	; 0x11
     5cc:	80 8b       	std	Z+16, r24	; 0x10
     5ce:	81 ec       	ldi	r24, 0xC1	; 193
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	93 8b       	std	Z+19, r25	; 0x13
     5d4:	82 8b       	std	Z+18, r24	; 0x12
     5d6:	82 ec       	ldi	r24, 0xC2	; 194
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	95 8b       	std	Z+21, r25	; 0x15
     5dc:	84 8b       	std	Z+20, r24	; 0x14
     5de:	86 ec       	ldi	r24, 0xC6	; 198
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	97 8b       	std	Z+23, r25	; 0x17
     5e4:	86 8b       	std	Z+22, r24	; 0x16
     5e6:	11 8e       	std	Z+25, r1	; 0x19
     5e8:	12 8e       	std	Z+26, r1	; 0x1a
     5ea:	13 8e       	std	Z+27, r1	; 0x1b
     5ec:	14 8e       	std	Z+28, r1	; 0x1c
     5ee:	08 95       	ret

000005f0 <initVariant>:
     5f0:	08 95       	ret

000005f2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     5f2:	90 d1       	rcall	.+800    	; 0x914 <init>

	initVariant();
     5f4:	fd df       	rcall	.-6      	; 0x5f0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     5f6:	a6 dd       	rcall	.-1204   	; 0x144 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     5f8:	cc e3       	ldi	r28, 0x3C	; 60
     5fa:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     5fc:	ab dd       	rcall	.-1194   	; 0x154 <loop>
		if (serialEventRun) serialEventRun();
     5fe:	20 97       	sbiw	r28, 0x00	; 0
     600:	e9 f3       	breq	.-6      	; 0x5fc <main+0xa>
     602:	3a de       	rcall	.-908    	; 0x278 <_Z14serialEventRunv>
     604:	fb cf       	rjmp	.-10     	; 0x5fc <main+0xa>

00000606 <_ZN5Print5writeEPKhj>:
     606:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	6c 01       	movw	r12, r24
     618:	7a 01       	movw	r14, r20
     61a:	8b 01       	movw	r16, r22
     61c:	c0 e0       	ldi	r28, 0x00	; 0
     61e:	d0 e0       	ldi	r29, 0x00	; 0
     620:	ce 15       	cp	r28, r14
     622:	df 05       	cpc	r29, r15
     624:	81 f0       	breq	.+32     	; 0x646 <_ZN5Print5writeEPKhj+0x40>
     626:	d8 01       	movw	r26, r16
     628:	6d 91       	ld	r22, X+
     62a:	8d 01       	movw	r16, r26
     62c:	d6 01       	movw	r26, r12
     62e:	ed 91       	ld	r30, X+
     630:	fc 91       	ld	r31, X
     632:	01 90       	ld	r0, Z+
     634:	f0 81       	ld	r31, Z
     636:	e0 2d       	mov	r30, r0
     638:	c6 01       	movw	r24, r12
     63a:	19 95       	eicall
     63c:	89 2b       	or	r24, r25
     63e:	11 f0       	breq	.+4      	; 0x644 <_ZN5Print5writeEPKhj+0x3e>
     640:	21 96       	adiw	r28, 0x01	; 1
     642:	ee cf       	rjmp	.-36     	; 0x620 <_ZN5Print5writeEPKhj+0x1a>
     644:	7e 01       	movw	r14, r28
     646:	c7 01       	movw	r24, r14
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	08 95       	ret

0000065a <_ZN5Print5writeEPKc>:
     65a:	61 15       	cp	r22, r1
     65c:	71 05       	cpc	r23, r1
     65e:	79 f0       	breq	.+30     	; 0x67e <_ZN5Print5writeEPKc+0x24>
     660:	fb 01       	movw	r30, r22
     662:	01 90       	ld	r0, Z+
     664:	00 20       	and	r0, r0
     666:	e9 f7       	brne	.-6      	; 0x662 <_ZN5Print5writeEPKc+0x8>
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	af 01       	movw	r20, r30
     66c:	46 1b       	sub	r20, r22
     66e:	57 0b       	sbc	r21, r23
     670:	dc 01       	movw	r26, r24
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	02 80       	ldd	r0, Z+2	; 0x02
     678:	f3 81       	ldd	r31, Z+3	; 0x03
     67a:	e0 2d       	mov	r30, r0
     67c:	19 94       	eijmp
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	08 95       	ret

00000684 <_ZN5Print5printEPKc>:
     684:	ea cf       	rjmp	.-44     	; 0x65a <_ZN5Print5writeEPKc>

00000686 <_ZN5Print5printEc>:
     686:	dc 01       	movw	r26, r24
     688:	ed 91       	ld	r30, X+
     68a:	fc 91       	ld	r31, X
     68c:	01 90       	ld	r0, Z+
     68e:	f0 81       	ld	r31, Z
     690:	e0 2d       	mov	r30, r0
     692:	19 94       	eijmp

00000694 <_ZN5Print7printlnEv>:
     694:	61 e3       	ldi	r22, 0x31	; 49
     696:	72 e0       	ldi	r23, 0x02	; 2
     698:	e0 cf       	rjmp	.-64     	; 0x65a <_ZN5Print5writeEPKc>

0000069a <_ZN5Print11printNumberEmh>:
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	a1 97       	sbiw	r28, 0x21	; 33
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	7c 01       	movw	r14, r24
     6c0:	fa 01       	movw	r30, r20
     6c2:	cb 01       	movw	r24, r22
     6c4:	19 a2       	std	Y+33, r1	; 0x21
     6c6:	22 30       	cpi	r18, 0x02	; 2
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <_ZN5Print11printNumberEmh+0x32>
     6ca:	2a e0       	ldi	r18, 0x0A	; 10
     6cc:	8e 01       	movw	r16, r28
     6ce:	0f 5d       	subi	r16, 0xDF	; 223
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
     6d2:	82 2e       	mov	r8, r18
     6d4:	91 2c       	mov	r9, r1
     6d6:	a1 2c       	mov	r10, r1
     6d8:	b1 2c       	mov	r11, r1
     6da:	bf 01       	movw	r22, r30
     6dc:	a5 01       	movw	r20, r10
     6de:	94 01       	movw	r18, r8
     6e0:	3f d2       	rcall	.+1150   	; 0xb60 <__udivmodsi4>
     6e2:	f9 01       	movw	r30, r18
     6e4:	ca 01       	movw	r24, r20
     6e6:	01 50       	subi	r16, 0x01	; 1
     6e8:	11 09       	sbc	r17, r1
     6ea:	6a 30       	cpi	r22, 0x0A	; 10
     6ec:	10 f4       	brcc	.+4      	; 0x6f2 <_ZN5Print11printNumberEmh+0x58>
     6ee:	60 5d       	subi	r22, 0xD0	; 208
     6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <_ZN5Print11printNumberEmh+0x5a>
     6f2:	69 5c       	subi	r22, 0xC9	; 201
     6f4:	d8 01       	movw	r26, r16
     6f6:	6c 93       	st	X, r22
     6f8:	23 2b       	or	r18, r19
     6fa:	24 2b       	or	r18, r20
     6fc:	25 2b       	or	r18, r21
     6fe:	69 f7       	brne	.-38     	; 0x6da <_ZN5Print11printNumberEmh+0x40>
     700:	b8 01       	movw	r22, r16
     702:	c7 01       	movw	r24, r14
     704:	aa df       	rcall	.-172    	; 0x65a <_ZN5Print5writeEPKc>
     706:	a1 96       	adiw	r28, 0x21	; 33
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	bf 90       	pop	r11
     720:	af 90       	pop	r10
     722:	9f 90       	pop	r9
     724:	8f 90       	pop	r8
     726:	08 95       	ret

00000728 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
  if (base == 0) {
     738:	21 15       	cp	r18, r1
     73a:	31 05       	cpc	r19, r1
     73c:	81 f4       	brne	.+32     	; 0x75e <_ZN5Print5printEli+0x36>
    return write(n);
     73e:	dc 01       	movw	r26, r24
     740:	ed 91       	ld	r30, X+
     742:	fc 91       	ld	r31, X
     744:	01 90       	ld	r0, Z+
     746:	f0 81       	ld	r31, Z
     748:	e0 2d       	mov	r30, r0
     74a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     75c:	19 94       	eijmp
  } else if (base == 10) {
     75e:	2a 30       	cpi	r18, 0x0A	; 10
     760:	31 05       	cpc	r19, r1
     762:	f1 f4       	brne	.+60     	; 0x7a0 <_ZN5Print5printEli+0x78>
    if (n < 0) {
     764:	77 ff       	sbrs	r23, 7
     766:	1b c0       	rjmp	.+54     	; 0x79e <_ZN5Print5printEli+0x76>
     768:	6a 01       	movw	r12, r20
     76a:	7b 01       	movw	r14, r22
     76c:	ec 01       	movw	r28, r24
      int t = print('-');
     76e:	6d e2       	ldi	r22, 0x2D	; 45
     770:	8a df       	rcall	.-236    	; 0x686 <_ZN5Print5printEc>
     772:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     774:	44 27       	eor	r20, r20
     776:	55 27       	eor	r21, r21
     778:	ba 01       	movw	r22, r20
     77a:	4c 19       	sub	r20, r12
     77c:	5d 09       	sbc	r21, r13
     77e:	6e 09       	sbc	r22, r14
     780:	7f 09       	sbc	r23, r15
     782:	2a e0       	ldi	r18, 0x0A	; 10
     784:	ce 01       	movw	r24, r28
     786:	89 df       	rcall	.-238    	; 0x69a <_ZN5Print11printNumberEmh>
     788:	80 0f       	add	r24, r16
     78a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     79e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     7ae:	cf 90       	pop	r12
     7b0:	74 cf       	rjmp	.-280    	; 0x69a <_ZN5Print11printNumberEmh>

000007b2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     7b2:	9a 01       	movw	r18, r20
  return print((long) n, base);
     7b4:	ab 01       	movw	r20, r22
     7b6:	77 0f       	add	r23, r23
     7b8:	66 0b       	sbc	r22, r22
     7ba:	77 0b       	sbc	r23, r23
     7bc:	b5 cf       	rjmp	.-150    	; 0x728 <_ZN5Print5printEli>

000007be <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     7c8:	f4 df       	rcall	.-24     	; 0x7b2 <_ZN5Print5printEii>
     7ca:	8c 01       	movw	r16, r24
  n += println();
     7cc:	ce 01       	movw	r24, r28
     7ce:	62 df       	rcall	.-316    	; 0x694 <_ZN5Print7printlnEv>
  return n;
}
     7d0:	80 0f       	add	r24, r16
     7d2:	91 1f       	adc	r25, r17
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <_ZN6Stream9timedReadEv>:
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
     7e8:	89 d0       	rcall	.+274    	; 0x8fc <millis>
     7ea:	68 87       	std	Y+8, r22	; 0x08
     7ec:	79 87       	std	Y+9, r23	; 0x09
     7ee:	8a 87       	std	Y+10, r24	; 0x0a
     7f0:	9b 87       	std	Y+11, r25	; 0x0b
     7f2:	e8 81       	ld	r30, Y
     7f4:	f9 81       	ldd	r31, Y+1	; 0x01
     7f6:	02 84       	ldd	r0, Z+10	; 0x0a
     7f8:	f3 85       	ldd	r31, Z+11	; 0x0b
     7fa:	e0 2d       	mov	r30, r0
     7fc:	ce 01       	movw	r24, r28
     7fe:	19 95       	eicall
     800:	97 ff       	sbrs	r25, 7
     802:	16 c0       	rjmp	.+44     	; 0x830 <_ZN6Stream9timedReadEv+0x52>
     804:	7b d0       	rcall	.+246    	; 0x8fc <millis>
     806:	08 85       	ldd	r16, Y+8	; 0x08
     808:	19 85       	ldd	r17, Y+9	; 0x09
     80a:	2a 85       	ldd	r18, Y+10	; 0x0a
     80c:	3b 85       	ldd	r19, Y+11	; 0x0b
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	80 1b       	sub	r24, r16
     814:	91 0b       	sbc	r25, r17
     816:	a2 0b       	sbc	r26, r18
     818:	b3 0b       	sbc	r27, r19
     81a:	0c 81       	ldd	r16, Y+4	; 0x04
     81c:	1d 81       	ldd	r17, Y+5	; 0x05
     81e:	2e 81       	ldd	r18, Y+6	; 0x06
     820:	3f 81       	ldd	r19, Y+7	; 0x07
     822:	80 17       	cp	r24, r16
     824:	91 07       	cpc	r25, r17
     826:	a2 07       	cpc	r26, r18
     828:	b3 07       	cpc	r27, r19
     82a:	18 f3       	brcs	.-58     	; 0x7f2 <_ZN6Stream9timedReadEv+0x14>
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	9f ef       	ldi	r25, 0xFF	; 255
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	08 95       	ret

0000083a <_ZN6Stream10readStringEv>:

String Stream::readString()
{
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
     844:	8b 01       	movw	r16, r22
  String ret;
     846:	63 e3       	ldi	r22, 0x33	; 51
     848:	72 e0       	ldi	r23, 0x02	; 2
     84a:	2d d1       	rcall	.+602    	; 0xaa6 <_ZN6StringC1EPKc>
  int c = timedRead();
     84c:	c8 01       	movw	r24, r16
     84e:	c7 df       	rcall	.-114    	; 0x7de <_ZN6Stream9timedReadEv>
  while (c >= 0)
     850:	97 fd       	sbrc	r25, 7
     852:	04 c0       	rjmp	.+8      	; 0x85c <_ZN6Stream10readStringEv+0x22>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     854:	68 2f       	mov	r22, r24
     856:	ce 01       	movw	r24, r28
     858:	66 d1       	rcall	.+716    	; 0xb26 <_ZN6String6concatEc>
     85a:	f8 cf       	rjmp	.-16     	; 0x84c <_ZN6Stream10readStringEv+0x12>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
     85c:	ce 01       	movw	r24, r28
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	0f 92       	push	r0
     870:	11 24       	eor	r1, r1
     872:	2f 93       	push	r18
     874:	3f 93       	push	r19
     876:	8f 93       	push	r24
     878:	9f 93       	push	r25
     87a:	af 93       	push	r26
     87c:	bf 93       	push	r27
     87e:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <timer0_millis>
     882:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <timer0_millis+0x1>
     886:	a0 91 e0 02 	lds	r26, 0x02E0	; 0x8002e0 <timer0_millis+0x2>
     88a:	b0 91 e1 02 	lds	r27, 0x02E1	; 0x8002e1 <timer0_millis+0x3>
     88e:	30 91 dd 02 	lds	r19, 0x02DD	; 0x8002dd <timer0_fract>
     892:	23 e0       	ldi	r18, 0x03	; 3
     894:	23 0f       	add	r18, r19
     896:	2d 37       	cpi	r18, 0x7D	; 125
     898:	20 f4       	brcc	.+8      	; 0x8a2 <__vector_23+0x3a>
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	a1 1d       	adc	r26, r1
     89e:	b1 1d       	adc	r27, r1
     8a0:	05 c0       	rjmp	.+10     	; 0x8ac <__vector_23+0x44>
     8a2:	26 e8       	ldi	r18, 0x86	; 134
     8a4:	23 0f       	add	r18, r19
     8a6:	02 96       	adiw	r24, 0x02	; 2
     8a8:	a1 1d       	adc	r26, r1
     8aa:	b1 1d       	adc	r27, r1
     8ac:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <timer0_fract>
     8b0:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <timer0_millis>
     8b4:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <timer0_millis+0x1>
     8b8:	a0 93 e0 02 	sts	0x02E0, r26	; 0x8002e0 <timer0_millis+0x2>
     8bc:	b0 93 e1 02 	sts	0x02E1, r27	; 0x8002e1 <timer0_millis+0x3>
     8c0:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <timer0_overflow_count>
     8c4:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <timer0_overflow_count+0x1>
     8c8:	a0 91 e4 02 	lds	r26, 0x02E4	; 0x8002e4 <timer0_overflow_count+0x2>
     8cc:	b0 91 e5 02 	lds	r27, 0x02E5	; 0x8002e5 <timer0_overflow_count+0x3>
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	a1 1d       	adc	r26, r1
     8d4:	b1 1d       	adc	r27, r1
     8d6:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <timer0_overflow_count>
     8da:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <timer0_overflow_count+0x1>
     8de:	a0 93 e4 02 	sts	0x02E4, r26	; 0x8002e4 <timer0_overflow_count+0x2>
     8e2:	b0 93 e5 02 	sts	0x02E5, r27	; 0x8002e5 <timer0_overflow_count+0x3>
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <millis>:
     8fc:	2f b7       	in	r18, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <timer0_millis>
     904:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <timer0_millis+0x1>
     908:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <timer0_millis+0x2>
     90c:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <timer0_millis+0x3>
     910:	2f bf       	out	0x3f, r18	; 63
     912:	08 95       	ret

00000914 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     914:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     916:	84 b5       	in	r24, 0x24	; 36
     918:	82 60       	ori	r24, 0x02	; 2
     91a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     91c:	84 b5       	in	r24, 0x24	; 36
     91e:	81 60       	ori	r24, 0x01	; 1
     920:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     922:	85 b5       	in	r24, 0x25	; 37
     924:	82 60       	ori	r24, 0x02	; 2
     926:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     928:	85 b5       	in	r24, 0x25	; 37
     92a:	81 60       	ori	r24, 0x01	; 1
     92c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     92e:	ee e6       	ldi	r30, 0x6E	; 110
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	81 60       	ori	r24, 0x01	; 1
     936:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     938:	e1 e8       	ldi	r30, 0x81	; 129
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     93e:	80 81       	ld	r24, Z
     940:	82 60       	ori	r24, 0x02	; 2
     942:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     944:	80 81       	ld	r24, Z
     946:	81 60       	ori	r24, 0x01	; 1
     948:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     94a:	e0 e8       	ldi	r30, 0x80	; 128
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	81 60       	ori	r24, 0x01	; 1
     952:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     954:	e1 eb       	ldi	r30, 0xB1	; 177
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	84 60       	ori	r24, 0x04	; 4
     95c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     95e:	e0 eb       	ldi	r30, 0xB0	; 176
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	81 60       	ori	r24, 0x01	; 1
     966:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     968:	e1 e9       	ldi	r30, 0x91	; 145
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	82 60       	ori	r24, 0x02	; 2
     970:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     972:	80 81       	ld	r24, Z
     974:	81 60       	ori	r24, 0x01	; 1
     976:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     978:	e0 e9       	ldi	r30, 0x90	; 144
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	81 60       	ori	r24, 0x01	; 1
     980:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     982:	e1 ea       	ldi	r30, 0xA1	; 161
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	82 60       	ori	r24, 0x02	; 2
     98a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     98c:	80 81       	ld	r24, Z
     98e:	81 60       	ori	r24, 0x01	; 1
     990:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     992:	e0 ea       	ldi	r30, 0xA0	; 160
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	81 60       	ori	r24, 0x01	; 1
     99a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     99c:	e1 e2       	ldi	r30, 0x21	; 33
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	80 81       	ld	r24, Z
     9a2:	82 60       	ori	r24, 0x02	; 2
     9a4:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     9a6:	80 81       	ld	r24, Z
     9a8:	81 60       	ori	r24, 0x01	; 1
     9aa:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     9ac:	e0 e2       	ldi	r30, 0x20	; 32
     9ae:	f1 e0       	ldi	r31, 0x01	; 1
     9b0:	80 81       	ld	r24, Z
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     9b6:	ea e7       	ldi	r30, 0x7A	; 122
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	84 60       	ori	r24, 0x04	; 4
     9be:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     9c0:	80 81       	ld	r24, Z
     9c2:	82 60       	ori	r24, 0x02	; 2
     9c4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     9c6:	80 81       	ld	r24, Z
     9c8:	81 60       	ori	r24, 0x01	; 1
     9ca:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     9cc:	80 81       	ld	r24, Z
     9ce:	80 68       	ori	r24, 0x80	; 128
     9d0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     9d2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     9d6:	08 95       	ret

000009d8 <_ZN6StringD1Ev>:
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
     9d8:	fc 01       	movw	r30, r24
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
     9de:	82 c1       	rjmp	.+772    	; 0xce4 <free>

000009e0 <_ZN6String10invalidateEv>:
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ec 01       	movw	r28, r24
     9e6:	88 81       	ld	r24, Y
     9e8:	99 81       	ldd	r25, Y+1	; 0x01
     9ea:	00 97       	sbiw	r24, 0x00	; 0
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <_ZN6String10invalidateEv+0x10>
     9ee:	7a d1       	rcall	.+756    	; 0xce4 <free>
     9f0:	19 82       	std	Y+1, r1	; 0x01
     9f2:	18 82       	st	Y, r1
     9f4:	1d 82       	std	Y+5, r1	; 0x05
     9f6:	1c 82       	std	Y+4, r1	; 0x04
     9f8:	1b 82       	std	Y+3, r1	; 0x03
     9fa:	1a 82       	std	Y+2, r1	; 0x02
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <_ZN6String12changeBufferEj>:
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	ec 01       	movw	r28, r24
     a0c:	8b 01       	movw	r16, r22
     a0e:	6f 5f       	subi	r22, 0xFF	; 255
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	88 81       	ld	r24, Y
     a14:	99 81       	ldd	r25, Y+1	; 0x01
     a16:	ef d1       	rcall	.+990    	; 0xdf6 <realloc>
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	31 f0       	breq	.+12     	; 0xa28 <_ZN6String12changeBufferEj+0x26>
     a1c:	99 83       	std	Y+1, r25	; 0x01
     a1e:	88 83       	st	Y, r24
     a20:	1b 83       	std	Y+3, r17	; 0x03
     a22:	0a 83       	std	Y+2, r16	; 0x02
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <_ZN6String12changeBufferEj+0x28>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <_ZN6String7reserveEj>:
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	ec 01       	movw	r28, r24
     a3a:	88 81       	ld	r24, Y
     a3c:	99 81       	ldd	r25, Y+1	; 0x01
     a3e:	89 2b       	or	r24, r25
     a40:	29 f0       	breq	.+10     	; 0xa4c <_ZN6String7reserveEj+0x18>
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	9b 81       	ldd	r25, Y+3	; 0x03
     a46:	86 17       	cp	r24, r22
     a48:	97 07       	cpc	r25, r23
     a4a:	58 f4       	brcc	.+22     	; 0xa62 <_ZN6String7reserveEj+0x2e>
     a4c:	ce 01       	movw	r24, r28
     a4e:	d9 df       	rcall	.-78     	; 0xa02 <_ZN6String12changeBufferEj>
     a50:	88 23       	and	r24, r24
     a52:	41 f0       	breq	.+16     	; 0xa64 <_ZN6String7reserveEj+0x30>
     a54:	8c 81       	ldd	r24, Y+4	; 0x04
     a56:	9d 81       	ldd	r25, Y+5	; 0x05
     a58:	89 2b       	or	r24, r25
     a5a:	19 f4       	brne	.+6      	; 0xa62 <_ZN6String7reserveEj+0x2e>
     a5c:	e8 81       	ld	r30, Y
     a5e:	f9 81       	ldd	r31, Y+1	; 0x01
     a60:	10 82       	st	Z, r1
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <_ZN6String4copyEPKcj>:
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	ec 01       	movw	r28, r24
     a78:	7b 01       	movw	r14, r22
     a7a:	8a 01       	movw	r16, r20
     a7c:	ba 01       	movw	r22, r20
     a7e:	da df       	rcall	.-76     	; 0xa34 <_ZN6String7reserveEj>
     a80:	81 11       	cpse	r24, r1
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <_ZN6String4copyEPKcj+0x20>
     a84:	ce 01       	movw	r24, r28
     a86:	ac df       	rcall	.-168    	; 0x9e0 <_ZN6String10invalidateEv>
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <_ZN6String4copyEPKcj+0x2c>
     a8a:	1d 83       	std	Y+5, r17	; 0x05
     a8c:	0c 83       	std	Y+4, r16	; 0x04
     a8e:	b7 01       	movw	r22, r14
     a90:	88 81       	ld	r24, Y
     a92:	99 81       	ldd	r25, Y+1	; 0x01
     a94:	bf d2       	rcall	.+1406   	; 0x1014 <strcpy>
     a96:	ce 01       	movw	r24, r28
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <_ZN6StringC1EPKc>:
     aa6:	fc 01       	movw	r30, r24
     aa8:	11 82       	std	Z+1, r1	; 0x01
     aaa:	10 82       	st	Z, r1
     aac:	13 82       	std	Z+3, r1	; 0x03
     aae:	12 82       	std	Z+2, r1	; 0x02
     ab0:	15 82       	std	Z+5, r1	; 0x05
     ab2:	14 82       	std	Z+4, r1	; 0x04
     ab4:	61 15       	cp	r22, r1
     ab6:	71 05       	cpc	r23, r1
     ab8:	49 f0       	breq	.+18     	; 0xacc <_ZN6StringC1EPKc+0x26>
     aba:	fb 01       	movw	r30, r22
     abc:	01 90       	ld	r0, Z+
     abe:	00 20       	and	r0, r0
     ac0:	e9 f7       	brne	.-6      	; 0xabc <_ZN6StringC1EPKc+0x16>
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	af 01       	movw	r20, r30
     ac6:	46 1b       	sub	r20, r22
     ac8:	57 0b       	sbc	r21, r23
     aca:	cf cf       	rjmp	.-98     	; 0xa6a <_ZN6String4copyEPKcj>
     acc:	08 95       	ret

00000ace <_ZN6String6concatEPKcj>:
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	61 15       	cp	r22, r1
     adc:	71 05       	cpc	r23, r1
     ade:	11 f4       	brne	.+4      	; 0xae4 <_ZN6String6concatEPKcj+0x16>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	1a c0       	rjmp	.+52     	; 0xb18 <_ZN6String6concatEPKcj+0x4a>
     ae4:	41 15       	cp	r20, r1
     ae6:	51 05       	cpc	r21, r1
     ae8:	b1 f0       	breq	.+44     	; 0xb16 <_ZN6String6concatEPKcj+0x48>
     aea:	7b 01       	movw	r14, r22
     aec:	ec 01       	movw	r28, r24
     aee:	8c 81       	ldd	r24, Y+4	; 0x04
     af0:	9d 81       	ldd	r25, Y+5	; 0x05
     af2:	8a 01       	movw	r16, r20
     af4:	08 0f       	add	r16, r24
     af6:	19 1f       	adc	r17, r25
     af8:	b8 01       	movw	r22, r16
     afa:	ce 01       	movw	r24, r28
     afc:	9b df       	rcall	.-202    	; 0xa34 <_ZN6String7reserveEj>
     afe:	88 23       	and	r24, r24
     b00:	79 f3       	breq	.-34     	; 0xae0 <_ZN6String6concatEPKcj+0x12>
     b02:	28 81       	ld	r18, Y
     b04:	39 81       	ldd	r19, Y+1	; 0x01
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	9d 81       	ldd	r25, Y+5	; 0x05
     b0a:	b7 01       	movw	r22, r14
     b0c:	82 0f       	add	r24, r18
     b0e:	93 1f       	adc	r25, r19
     b10:	81 d2       	rcall	.+1282   	; 0x1014 <strcpy>
     b12:	1d 83       	std	Y+5, r17	; 0x05
     b14:	0c 83       	std	Y+4, r16	; 0x04
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	08 95       	ret

00000b26 <_ZN6String6concatEc>:
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	1f 92       	push	r1
     b2c:	1f 92       	push	r1
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	69 83       	std	Y+1, r22	; 0x01
     b34:	1a 82       	std	Y+2, r1	; 0x02
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	be 01       	movw	r22, r28
     b3c:	6f 5f       	subi	r22, 0xFF	; 255
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	c6 df       	rcall	.-116    	; 0xace <_ZN6String6concatEPKcj>
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
     b4c:	fc 01       	movw	r30, r24
     b4e:	80 81       	ld	r24, Z
     b50:	91 81       	ldd	r25, Z+1	; 0x01
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	09 f0       	breq	.+2      	; 0xb58 <_ZNK6String5toIntEv+0xc>
     b56:	2f c2       	rjmp	.+1118   	; 0xfb6 <atol>
	return 0;
}
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	cb 01       	movw	r24, r22
     b5e:	08 95       	ret

00000b60 <__udivmodsi4>:
     b60:	a1 e2       	ldi	r26, 0x21	; 33
     b62:	1a 2e       	mov	r1, r26
     b64:	aa 1b       	sub	r26, r26
     b66:	bb 1b       	sub	r27, r27
     b68:	fd 01       	movw	r30, r26
     b6a:	0d c0       	rjmp	.+26     	; 0xb86 <__udivmodsi4_ep>

00000b6c <__udivmodsi4_loop>:
     b6c:	aa 1f       	adc	r26, r26
     b6e:	bb 1f       	adc	r27, r27
     b70:	ee 1f       	adc	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	a2 17       	cp	r26, r18
     b76:	b3 07       	cpc	r27, r19
     b78:	e4 07       	cpc	r30, r20
     b7a:	f5 07       	cpc	r31, r21
     b7c:	20 f0       	brcs	.+8      	; 0xb86 <__udivmodsi4_ep>
     b7e:	a2 1b       	sub	r26, r18
     b80:	b3 0b       	sbc	r27, r19
     b82:	e4 0b       	sbc	r30, r20
     b84:	f5 0b       	sbc	r31, r21

00000b86 <__udivmodsi4_ep>:
     b86:	66 1f       	adc	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	88 1f       	adc	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	1a 94       	dec	r1
     b90:	69 f7       	brne	.-38     	; 0xb6c <__udivmodsi4_loop>
     b92:	60 95       	com	r22
     b94:	70 95       	com	r23
     b96:	80 95       	com	r24
     b98:	90 95       	com	r25
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	bd 01       	movw	r22, r26
     ba0:	cf 01       	movw	r24, r30
     ba2:	08 95       	ret

00000ba4 <__tablejump2__>:
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	88 1f       	adc	r24, r24
     baa:	8b bf       	out	0x3b, r24	; 59
     bac:	07 90       	elpm	r0, Z+
     bae:	f6 91       	elpm	r31, Z
     bb0:	e0 2d       	mov	r30, r0
     bb2:	19 94       	eijmp

00000bb4 <malloc>:
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	91 05       	cpc	r25, r1
     bc0:	10 f4       	brcc	.+4      	; 0xbc6 <malloc+0x12>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <__flp>
     bca:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <__flp+0x1>
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	30 97       	sbiw	r30, 0x00	; 0
     bd8:	19 f1       	breq	.+70     	; 0xc20 <malloc+0x6c>
     bda:	40 81       	ld	r20, Z
     bdc:	51 81       	ldd	r21, Z+1	; 0x01
     bde:	02 81       	ldd	r16, Z+2	; 0x02
     be0:	13 81       	ldd	r17, Z+3	; 0x03
     be2:	48 17       	cp	r20, r24
     be4:	59 07       	cpc	r21, r25
     be6:	c8 f0       	brcs	.+50     	; 0xc1a <malloc+0x66>
     be8:	84 17       	cp	r24, r20
     bea:	95 07       	cpc	r25, r21
     bec:	69 f4       	brne	.+26     	; 0xc08 <malloc+0x54>
     bee:	10 97       	sbiw	r26, 0x00	; 0
     bf0:	31 f0       	breq	.+12     	; 0xbfe <malloc+0x4a>
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	0c 93       	st	X, r16
     bf6:	12 97       	sbiw	r26, 0x02	; 2
     bf8:	13 96       	adiw	r26, 0x03	; 3
     bfa:	1c 93       	st	X, r17
     bfc:	27 c0       	rjmp	.+78     	; 0xc4c <malloc+0x98>
     bfe:	00 93 e8 02 	sts	0x02E8, r16	; 0x8002e8 <__flp>
     c02:	10 93 e9 02 	sts	0x02E9, r17	; 0x8002e9 <__flp+0x1>
     c06:	22 c0       	rjmp	.+68     	; 0xc4c <malloc+0x98>
     c08:	21 15       	cp	r18, r1
     c0a:	31 05       	cpc	r19, r1
     c0c:	19 f0       	breq	.+6      	; 0xc14 <malloc+0x60>
     c0e:	42 17       	cp	r20, r18
     c10:	53 07       	cpc	r21, r19
     c12:	18 f4       	brcc	.+6      	; 0xc1a <malloc+0x66>
     c14:	9a 01       	movw	r18, r20
     c16:	bd 01       	movw	r22, r26
     c18:	ef 01       	movw	r28, r30
     c1a:	df 01       	movw	r26, r30
     c1c:	f8 01       	movw	r30, r16
     c1e:	db cf       	rjmp	.-74     	; 0xbd6 <malloc+0x22>
     c20:	21 15       	cp	r18, r1
     c22:	31 05       	cpc	r19, r1
     c24:	f9 f0       	breq	.+62     	; 0xc64 <malloc+0xb0>
     c26:	28 1b       	sub	r18, r24
     c28:	39 0b       	sbc	r19, r25
     c2a:	24 30       	cpi	r18, 0x04	; 4
     c2c:	31 05       	cpc	r19, r1
     c2e:	80 f4       	brcc	.+32     	; 0xc50 <malloc+0x9c>
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	9b 81       	ldd	r25, Y+3	; 0x03
     c34:	61 15       	cp	r22, r1
     c36:	71 05       	cpc	r23, r1
     c38:	21 f0       	breq	.+8      	; 0xc42 <malloc+0x8e>
     c3a:	fb 01       	movw	r30, r22
     c3c:	93 83       	std	Z+3, r25	; 0x03
     c3e:	82 83       	std	Z+2, r24	; 0x02
     c40:	04 c0       	rjmp	.+8      	; 0xc4a <malloc+0x96>
     c42:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <__flp+0x1>
     c46:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <__flp>
     c4a:	fe 01       	movw	r30, r28
     c4c:	32 96       	adiw	r30, 0x02	; 2
     c4e:	44 c0       	rjmp	.+136    	; 0xcd8 <malloc+0x124>
     c50:	fe 01       	movw	r30, r28
     c52:	e2 0f       	add	r30, r18
     c54:	f3 1f       	adc	r31, r19
     c56:	81 93       	st	Z+, r24
     c58:	91 93       	st	Z+, r25
     c5a:	22 50       	subi	r18, 0x02	; 2
     c5c:	31 09       	sbc	r19, r1
     c5e:	39 83       	std	Y+1, r19	; 0x01
     c60:	28 83       	st	Y, r18
     c62:	3a c0       	rjmp	.+116    	; 0xcd8 <malloc+0x124>
     c64:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <__brkval>
     c68:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <__brkval+0x1>
     c6c:	23 2b       	or	r18, r19
     c6e:	41 f4       	brne	.+16     	; 0xc80 <malloc+0xcc>
     c70:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     c74:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     c78:	30 93 e7 02 	sts	0x02E7, r19	; 0x8002e7 <__brkval+0x1>
     c7c:	20 93 e6 02 	sts	0x02E6, r18	; 0x8002e6 <__brkval>
     c80:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     c84:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     c88:	21 15       	cp	r18, r1
     c8a:	31 05       	cpc	r19, r1
     c8c:	41 f4       	brne	.+16     	; 0xc9e <malloc+0xea>
     c8e:	2d b7       	in	r18, 0x3d	; 61
     c90:	3e b7       	in	r19, 0x3e	; 62
     c92:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     c96:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     c9a:	24 1b       	sub	r18, r20
     c9c:	35 0b       	sbc	r19, r21
     c9e:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <__brkval>
     ca2:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <__brkval+0x1>
     ca6:	e2 17       	cp	r30, r18
     ca8:	f3 07       	cpc	r31, r19
     caa:	a0 f4       	brcc	.+40     	; 0xcd4 <malloc+0x120>
     cac:	2e 1b       	sub	r18, r30
     cae:	3f 0b       	sbc	r19, r31
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	78 f0       	brcs	.+30     	; 0xcd4 <malloc+0x120>
     cb6:	ac 01       	movw	r20, r24
     cb8:	4e 5f       	subi	r20, 0xFE	; 254
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	24 17       	cp	r18, r20
     cbe:	35 07       	cpc	r19, r21
     cc0:	48 f0       	brcs	.+18     	; 0xcd4 <malloc+0x120>
     cc2:	4e 0f       	add	r20, r30
     cc4:	5f 1f       	adc	r21, r31
     cc6:	50 93 e7 02 	sts	0x02E7, r21	; 0x8002e7 <__brkval+0x1>
     cca:	40 93 e6 02 	sts	0x02E6, r20	; 0x8002e6 <__brkval>
     cce:	81 93       	st	Z+, r24
     cd0:	91 93       	st	Z+, r25
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <malloc+0x124>
     cd4:	e0 e0       	ldi	r30, 0x00	; 0
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	cf 01       	movw	r24, r30
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <free>:
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	09 f4       	brne	.+2      	; 0xcee <free+0xa>
     cec:	81 c0       	rjmp	.+258    	; 0xdf0 <free+0x10c>
     cee:	fc 01       	movw	r30, r24
     cf0:	32 97       	sbiw	r30, 0x02	; 2
     cf2:	13 82       	std	Z+3, r1	; 0x03
     cf4:	12 82       	std	Z+2, r1	; 0x02
     cf6:	a0 91 e8 02 	lds	r26, 0x02E8	; 0x8002e8 <__flp>
     cfa:	b0 91 e9 02 	lds	r27, 0x02E9	; 0x8002e9 <__flp+0x1>
     cfe:	10 97       	sbiw	r26, 0x00	; 0
     d00:	81 f4       	brne	.+32     	; 0xd22 <free+0x3e>
     d02:	20 81       	ld	r18, Z
     d04:	31 81       	ldd	r19, Z+1	; 0x01
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <__brkval>
     d0e:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <__brkval+0x1>
     d12:	28 17       	cp	r18, r24
     d14:	39 07       	cpc	r19, r25
     d16:	51 f5       	brne	.+84     	; 0xd6c <free+0x88>
     d18:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__brkval+0x1>
     d1c:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__brkval>
     d20:	67 c0       	rjmp	.+206    	; 0xdf0 <free+0x10c>
     d22:	ed 01       	movw	r28, r26
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	ce 17       	cp	r28, r30
     d2a:	df 07       	cpc	r29, r31
     d2c:	40 f4       	brcc	.+16     	; 0xd3e <free+0x5a>
     d2e:	4a 81       	ldd	r20, Y+2	; 0x02
     d30:	5b 81       	ldd	r21, Y+3	; 0x03
     d32:	9e 01       	movw	r18, r28
     d34:	41 15       	cp	r20, r1
     d36:	51 05       	cpc	r21, r1
     d38:	f1 f0       	breq	.+60     	; 0xd76 <free+0x92>
     d3a:	ea 01       	movw	r28, r20
     d3c:	f5 cf       	rjmp	.-22     	; 0xd28 <free+0x44>
     d3e:	d3 83       	std	Z+3, r29	; 0x03
     d40:	c2 83       	std	Z+2, r28	; 0x02
     d42:	40 81       	ld	r20, Z
     d44:	51 81       	ldd	r21, Z+1	; 0x01
     d46:	84 0f       	add	r24, r20
     d48:	95 1f       	adc	r25, r21
     d4a:	c8 17       	cp	r28, r24
     d4c:	d9 07       	cpc	r29, r25
     d4e:	59 f4       	brne	.+22     	; 0xd66 <free+0x82>
     d50:	88 81       	ld	r24, Y
     d52:	99 81       	ldd	r25, Y+1	; 0x01
     d54:	84 0f       	add	r24, r20
     d56:	95 1f       	adc	r25, r21
     d58:	02 96       	adiw	r24, 0x02	; 2
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
     d62:	93 83       	std	Z+3, r25	; 0x03
     d64:	82 83       	std	Z+2, r24	; 0x02
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	29 f4       	brne	.+10     	; 0xd76 <free+0x92>
     d6c:	f0 93 e9 02 	sts	0x02E9, r31	; 0x8002e9 <__flp+0x1>
     d70:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <__flp>
     d74:	3d c0       	rjmp	.+122    	; 0xdf0 <free+0x10c>
     d76:	e9 01       	movw	r28, r18
     d78:	fb 83       	std	Y+3, r31	; 0x03
     d7a:	ea 83       	std	Y+2, r30	; 0x02
     d7c:	49 91       	ld	r20, Y+
     d7e:	59 91       	ld	r21, Y+
     d80:	c4 0f       	add	r28, r20
     d82:	d5 1f       	adc	r29, r21
     d84:	ec 17       	cp	r30, r28
     d86:	fd 07       	cpc	r31, r29
     d88:	61 f4       	brne	.+24     	; 0xda2 <free+0xbe>
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	84 0f       	add	r24, r20
     d90:	95 1f       	adc	r25, r21
     d92:	02 96       	adiw	r24, 0x02	; 2
     d94:	e9 01       	movw	r28, r18
     d96:	99 83       	std	Y+1, r25	; 0x01
     d98:	88 83       	st	Y, r24
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	9b 83       	std	Y+3, r25	; 0x03
     da0:	8a 83       	std	Y+2, r24	; 0x02
     da2:	e0 e0       	ldi	r30, 0x00	; 0
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	19 f0       	breq	.+6      	; 0xdb8 <free+0xd4>
     db2:	fd 01       	movw	r30, r26
     db4:	dc 01       	movw	r26, r24
     db6:	f7 cf       	rjmp	.-18     	; 0xda6 <free+0xc2>
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	11 97       	sbiw	r26, 0x01	; 1
     dbe:	9d 01       	movw	r18, r26
     dc0:	2e 5f       	subi	r18, 0xFE	; 254
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <__brkval>
     dcc:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <__brkval+0x1>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	69 f4       	brne	.+26     	; 0xdf0 <free+0x10c>
     dd6:	30 97       	sbiw	r30, 0x00	; 0
     dd8:	29 f4       	brne	.+10     	; 0xde4 <free+0x100>
     dda:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <__flp+0x1>
     dde:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <__flp>
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <free+0x104>
     de4:	13 82       	std	Z+3, r1	; 0x03
     de6:	12 82       	std	Z+2, r1	; 0x02
     de8:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <__brkval+0x1>
     dec:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <__brkval>
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <realloc>:
     df6:	6f 92       	push	r6
     df8:	7f 92       	push	r7
     dfa:	8f 92       	push	r8
     dfc:	9f 92       	push	r9
     dfe:	af 92       	push	r10
     e00:	bf 92       	push	r11
     e02:	cf 92       	push	r12
     e04:	df 92       	push	r13
     e06:	ef 92       	push	r14
     e08:	ff 92       	push	r15
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	81 f4       	brne	.+32     	; 0xe36 <realloc+0x40>
     e16:	cb 01       	movw	r24, r22
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	bf 90       	pop	r11
     e2a:	af 90       	pop	r10
     e2c:	9f 90       	pop	r9
     e2e:	8f 90       	pop	r8
     e30:	7f 90       	pop	r7
     e32:	6f 90       	pop	r6
     e34:	bf ce       	rjmp	.-642    	; 0xbb4 <malloc>
     e36:	fc 01       	movw	r30, r24
     e38:	e6 0f       	add	r30, r22
     e3a:	f7 1f       	adc	r31, r23
     e3c:	9c 01       	movw	r18, r24
     e3e:	22 50       	subi	r18, 0x02	; 2
     e40:	31 09       	sbc	r19, r1
     e42:	e2 17       	cp	r30, r18
     e44:	f3 07       	cpc	r31, r19
     e46:	08 f4       	brcc	.+2      	; 0xe4a <realloc+0x54>
     e48:	a5 c0       	rjmp	.+330    	; 0xf94 <realloc+0x19e>
     e4a:	ec 01       	movw	r28, r24
     e4c:	d9 01       	movw	r26, r18
     e4e:	0d 91       	ld	r16, X+
     e50:	1c 91       	ld	r17, X
     e52:	11 97       	sbiw	r26, 0x01	; 1
     e54:	06 17       	cp	r16, r22
     e56:	17 07       	cpc	r17, r23
     e58:	a8 f0       	brcs	.+42     	; 0xe84 <realloc+0x8e>
     e5a:	05 30       	cpi	r16, 0x05	; 5
     e5c:	11 05       	cpc	r17, r1
     e5e:	08 f4       	brcc	.+2      	; 0xe62 <realloc+0x6c>
     e60:	97 c0       	rjmp	.+302    	; 0xf90 <realloc+0x19a>
     e62:	c8 01       	movw	r24, r16
     e64:	04 97       	sbiw	r24, 0x04	; 4
     e66:	86 17       	cp	r24, r22
     e68:	97 07       	cpc	r25, r23
     e6a:	08 f4       	brcc	.+2      	; 0xe6e <realloc+0x78>
     e6c:	91 c0       	rjmp	.+290    	; 0xf90 <realloc+0x19a>
     e6e:	02 50       	subi	r16, 0x02	; 2
     e70:	11 09       	sbc	r17, r1
     e72:	06 1b       	sub	r16, r22
     e74:	17 0b       	sbc	r17, r23
     e76:	01 93       	st	Z+, r16
     e78:	11 93       	st	Z+, r17
     e7a:	6d 93       	st	X+, r22
     e7c:	7c 93       	st	X, r23
     e7e:	cf 01       	movw	r24, r30
     e80:	31 df       	rcall	.-414    	; 0xce4 <free>
     e82:	86 c0       	rjmp	.+268    	; 0xf90 <realloc+0x19a>
     e84:	5b 01       	movw	r10, r22
     e86:	a0 1a       	sub	r10, r16
     e88:	b1 0a       	sbc	r11, r17
     e8a:	4c 01       	movw	r8, r24
     e8c:	80 0e       	add	r8, r16
     e8e:	91 1e       	adc	r9, r17
     e90:	a0 91 e8 02 	lds	r26, 0x02E8	; 0x8002e8 <__flp>
     e94:	b0 91 e9 02 	lds	r27, 0x02E9	; 0x8002e9 <__flp+0x1>
     e98:	61 2c       	mov	r6, r1
     e9a:	71 2c       	mov	r7, r1
     e9c:	e1 2c       	mov	r14, r1
     e9e:	f1 2c       	mov	r15, r1
     ea0:	10 97       	sbiw	r26, 0x00	; 0
     ea2:	09 f4       	brne	.+2      	; 0xea6 <realloc+0xb0>
     ea4:	46 c0       	rjmp	.+140    	; 0xf32 <realloc+0x13c>
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	a8 15       	cp	r26, r8
     eae:	b9 05       	cpc	r27, r9
     eb0:	b1 f5       	brne	.+108    	; 0xf1e <realloc+0x128>
     eb2:	6c 01       	movw	r12, r24
     eb4:	42 e0       	ldi	r20, 0x02	; 2
     eb6:	c4 0e       	add	r12, r20
     eb8:	d1 1c       	adc	r13, r1
     eba:	ca 14       	cp	r12, r10
     ebc:	db 04       	cpc	r13, r11
     ebe:	78 f1       	brcs	.+94     	; 0xf1e <realloc+0x128>
     ec0:	4c 01       	movw	r8, r24
     ec2:	8a 18       	sub	r8, r10
     ec4:	9b 08       	sbc	r9, r11
     ec6:	64 01       	movw	r12, r8
     ec8:	42 e0       	ldi	r20, 0x02	; 2
     eca:	c4 0e       	add	r12, r20
     ecc:	d1 1c       	adc	r13, r1
     ece:	12 96       	adiw	r26, 0x02	; 2
     ed0:	bc 90       	ld	r11, X
     ed2:	12 97       	sbiw	r26, 0x02	; 2
     ed4:	13 96       	adiw	r26, 0x03	; 3
     ed6:	ac 91       	ld	r26, X
     ed8:	b5 e0       	ldi	r27, 0x05	; 5
     eda:	cb 16       	cp	r12, r27
     edc:	d1 04       	cpc	r13, r1
     ede:	40 f0       	brcs	.+16     	; 0xef0 <realloc+0xfa>
     ee0:	b2 82       	std	Z+2, r11	; 0x02
     ee2:	a3 83       	std	Z+3, r26	; 0x03
     ee4:	91 82       	std	Z+1, r9	; 0x01
     ee6:	80 82       	st	Z, r8
     ee8:	d9 01       	movw	r26, r18
     eea:	6d 93       	st	X+, r22
     eec:	7c 93       	st	X, r23
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <realloc+0x10c>
     ef0:	0e 5f       	subi	r16, 0xFE	; 254
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	80 0f       	add	r24, r16
     ef6:	91 1f       	adc	r25, r17
     ef8:	f9 01       	movw	r30, r18
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
     efe:	eb 2d       	mov	r30, r11
     f00:	fa 2f       	mov	r31, r26
     f02:	e1 14       	cp	r14, r1
     f04:	f1 04       	cpc	r15, r1
     f06:	31 f0       	breq	.+12     	; 0xf14 <realloc+0x11e>
     f08:	d7 01       	movw	r26, r14
     f0a:	13 96       	adiw	r26, 0x03	; 3
     f0c:	fc 93       	st	X, r31
     f0e:	ee 93       	st	-X, r30
     f10:	12 97       	sbiw	r26, 0x02	; 2
     f12:	3e c0       	rjmp	.+124    	; 0xf90 <realloc+0x19a>
     f14:	f0 93 e9 02 	sts	0x02E9, r31	; 0x8002e9 <__flp+0x1>
     f18:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <__flp>
     f1c:	39 c0       	rjmp	.+114    	; 0xf90 <realloc+0x19a>
     f1e:	68 16       	cp	r6, r24
     f20:	79 06       	cpc	r7, r25
     f22:	08 f4       	brcc	.+2      	; 0xf26 <realloc+0x130>
     f24:	3c 01       	movw	r6, r24
     f26:	7d 01       	movw	r14, r26
     f28:	12 96       	adiw	r26, 0x02	; 2
     f2a:	0d 90       	ld	r0, X+
     f2c:	bc 91       	ld	r27, X
     f2e:	a0 2d       	mov	r26, r0
     f30:	b7 cf       	rjmp	.-146    	; 0xea0 <realloc+0xaa>
     f32:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <__brkval>
     f36:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <__brkval+0x1>
     f3a:	88 16       	cp	r8, r24
     f3c:	99 06       	cpc	r9, r25
     f3e:	e1 f4       	brne	.+56     	; 0xf78 <realloc+0x182>
     f40:	66 16       	cp	r6, r22
     f42:	77 06       	cpc	r7, r23
     f44:	c8 f4       	brcc	.+50     	; 0xf78 <realloc+0x182>
     f46:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     f4a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	41 f4       	brne	.+16     	; 0xf62 <realloc+0x16c>
     f52:	8d b7       	in	r24, 0x3d	; 61
     f54:	9e b7       	in	r25, 0x3e	; 62
     f56:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     f5a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     f5e:	84 1b       	sub	r24, r20
     f60:	95 0b       	sbc	r25, r21
     f62:	e8 17       	cp	r30, r24
     f64:	f9 07       	cpc	r31, r25
     f66:	b0 f4       	brcc	.+44     	; 0xf94 <realloc+0x19e>
     f68:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__brkval+0x1>
     f6c:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__brkval>
     f70:	f9 01       	movw	r30, r18
     f72:	71 83       	std	Z+1, r23	; 0x01
     f74:	60 83       	st	Z, r22
     f76:	0c c0       	rjmp	.+24     	; 0xf90 <realloc+0x19a>
     f78:	cb 01       	movw	r24, r22
     f7a:	1c de       	rcall	.-968    	; 0xbb4 <malloc>
     f7c:	7c 01       	movw	r14, r24
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	49 f0       	breq	.+18     	; 0xf94 <realloc+0x19e>
     f82:	a8 01       	movw	r20, r16
     f84:	be 01       	movw	r22, r28
     f86:	3d d0       	rcall	.+122    	; 0x1002 <memcpy>
     f88:	ce 01       	movw	r24, r28
     f8a:	ac de       	rcall	.-680    	; 0xce4 <free>
     f8c:	c7 01       	movw	r24, r14
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <realloc+0x1a2>
     f90:	ce 01       	movw	r24, r28
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <realloc+0x1a2>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	bf 90       	pop	r11
     faa:	af 90       	pop	r10
     fac:	9f 90       	pop	r9
     fae:	8f 90       	pop	r8
     fb0:	7f 90       	pop	r7
     fb2:	6f 90       	pop	r6
     fb4:	08 95       	ret

00000fb6 <atol>:
     fb6:	1f 93       	push	r17
     fb8:	fc 01       	movw	r30, r24
     fba:	99 27       	eor	r25, r25
     fbc:	88 27       	eor	r24, r24
     fbe:	bc 01       	movw	r22, r24
     fc0:	e8 94       	clt
     fc2:	11 91       	ld	r17, Z+
     fc4:	10 32       	cpi	r17, 0x20	; 32
     fc6:	e9 f3       	breq	.-6      	; 0xfc2 <atol+0xc>
     fc8:	19 30       	cpi	r17, 0x09	; 9
     fca:	10 f0       	brcs	.+4      	; 0xfd0 <atol+0x1a>
     fcc:	1e 30       	cpi	r17, 0x0E	; 14
     fce:	c8 f3       	brcs	.-14     	; 0xfc2 <atol+0xc>
     fd0:	1b 32       	cpi	r17, 0x2B	; 43
     fd2:	49 f0       	breq	.+18     	; 0xfe6 <atol+0x30>
     fd4:	1d 32       	cpi	r17, 0x2D	; 45
     fd6:	41 f4       	brne	.+16     	; 0xfe8 <atol+0x32>
     fd8:	68 94       	set
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <atol+0x30>
     fdc:	22 d0       	rcall	.+68     	; 0x1022 <__mulsi_const_10>
     fde:	61 0f       	add	r22, r17
     fe0:	71 1d       	adc	r23, r1
     fe2:	81 1d       	adc	r24, r1
     fe4:	91 1d       	adc	r25, r1
     fe6:	11 91       	ld	r17, Z+
     fe8:	10 53       	subi	r17, 0x30	; 48
     fea:	1a 30       	cpi	r17, 0x0A	; 10
     fec:	b8 f3       	brcs	.-18     	; 0xfdc <atol+0x26>
     fee:	3e f4       	brtc	.+14     	; 0xffe <atol+0x48>
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	1f 91       	pop	r17
    1000:	08 95       	ret

00001002 <memcpy>:
    1002:	fb 01       	movw	r30, r22
    1004:	dc 01       	movw	r26, r24
    1006:	02 c0       	rjmp	.+4      	; 0x100c <memcpy+0xa>
    1008:	01 90       	ld	r0, Z+
    100a:	0d 92       	st	X+, r0
    100c:	41 50       	subi	r20, 0x01	; 1
    100e:	50 40       	sbci	r21, 0x00	; 0
    1010:	d8 f7       	brcc	.-10     	; 0x1008 <memcpy+0x6>
    1012:	08 95       	ret

00001014 <strcpy>:
    1014:	fb 01       	movw	r30, r22
    1016:	dc 01       	movw	r26, r24
    1018:	01 90       	ld	r0, Z+
    101a:	0d 92       	st	X+, r0
    101c:	00 20       	and	r0, r0
    101e:	e1 f7       	brne	.-8      	; 0x1018 <strcpy+0x4>
    1020:	08 95       	ret

00001022 <__mulsi_const_10>:
    1022:	59 2f       	mov	r21, r25
    1024:	48 2f       	mov	r20, r24
    1026:	37 2f       	mov	r19, r23
    1028:	26 2f       	mov	r18, r22
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	66 0f       	add	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	88 1f       	adc	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	62 0f       	add	r22, r18
    103c:	73 1f       	adc	r23, r19
    103e:	84 1f       	adc	r24, r20
    1040:	95 1f       	adc	r25, r21
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	88 1f       	adc	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	08 95       	ret

0000104c <_exit>:
    104c:	f8 94       	cli

0000104e <__stop_program>:
    104e:	ff cf       	rjmp	.-2      	; 0x104e <__stop_program>
