
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00000b22  00000bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800218  00800218  00000bce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008023  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d2f  00000000  00000000  00008f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000185e  00000000  00000000  0000ac3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  0000c498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002192  00000000  00000000  0000cc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ac7  00000000  00000000  0000edb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00011879  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
   2:	00 00       	nop
   4:	33 c1       	rjmp	.+614    	; 0x26c <__bad_interrupt>
   6:	00 00       	nop
   8:	31 c1       	rjmp	.+610    	; 0x26c <__bad_interrupt>
   a:	00 00       	nop
   c:	2f c1       	rjmp	.+606    	; 0x26c <__bad_interrupt>
   e:	00 00       	nop
  10:	2d c1       	rjmp	.+602    	; 0x26c <__bad_interrupt>
  12:	00 00       	nop
  14:	2b c1       	rjmp	.+598    	; 0x26c <__bad_interrupt>
  16:	00 00       	nop
  18:	29 c1       	rjmp	.+594    	; 0x26c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	27 c1       	rjmp	.+590    	; 0x26c <__bad_interrupt>
  1e:	00 00       	nop
  20:	25 c1       	rjmp	.+586    	; 0x26c <__bad_interrupt>
  22:	00 00       	nop
  24:	23 c1       	rjmp	.+582    	; 0x26c <__bad_interrupt>
  26:	00 00       	nop
  28:	21 c1       	rjmp	.+578    	; 0x26c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1f c1       	rjmp	.+574    	; 0x26c <__bad_interrupt>
  2e:	00 00       	nop
  30:	1d c1       	rjmp	.+570    	; 0x26c <__bad_interrupt>
  32:	00 00       	nop
  34:	1b c1       	rjmp	.+566    	; 0x26c <__bad_interrupt>
  36:	00 00       	nop
  38:	19 c1       	rjmp	.+562    	; 0x26c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	17 c1       	rjmp	.+558    	; 0x26c <__bad_interrupt>
  3e:	00 00       	nop
  40:	15 c1       	rjmp	.+554    	; 0x26c <__bad_interrupt>
  42:	00 00       	nop
  44:	13 c1       	rjmp	.+550    	; 0x26c <__bad_interrupt>
  46:	00 00       	nop
  48:	11 c1       	rjmp	.+546    	; 0x26c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0f c1       	rjmp	.+542    	; 0x26c <__bad_interrupt>
  4e:	00 00       	nop
  50:	0d c1       	rjmp	.+538    	; 0x26c <__bad_interrupt>
  52:	00 00       	nop
  54:	0b c1       	rjmp	.+534    	; 0x26c <__bad_interrupt>
  56:	00 00       	nop
  58:	09 c1       	rjmp	.+530    	; 0x26c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6c c3       	rjmp	.+1752   	; 0x736 <__vector_23>
  5e:	00 00       	nop
  60:	05 c1       	rjmp	.+522    	; 0x26c <__bad_interrupt>
  62:	00 00       	nop
  64:	88 c2       	rjmp	.+1296   	; 0x576 <__vector_25>
  66:	00 00       	nop
  68:	bc c2       	rjmp	.+1400   	; 0x5e2 <__vector_26>
  6a:	00 00       	nop
  6c:	ff c0       	rjmp	.+510    	; 0x26c <__bad_interrupt>
  6e:	00 00       	nop
  70:	fd c0       	rjmp	.+506    	; 0x26c <__bad_interrupt>
  72:	00 00       	nop
  74:	fb c0       	rjmp	.+502    	; 0x26c <__bad_interrupt>
  76:	00 00       	nop
  78:	f9 c0       	rjmp	.+498    	; 0x26c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	f7 c0       	rjmp	.+494    	; 0x26c <__bad_interrupt>
  7e:	00 00       	nop
  80:	f5 c0       	rjmp	.+490    	; 0x26c <__bad_interrupt>
  82:	00 00       	nop
  84:	f3 c0       	rjmp	.+486    	; 0x26c <__bad_interrupt>
  86:	00 00       	nop
  88:	f1 c0       	rjmp	.+482    	; 0x26c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ef c0       	rjmp	.+478    	; 0x26c <__bad_interrupt>
  8e:	00 00       	nop
  90:	ed c0       	rjmp	.+474    	; 0x26c <__bad_interrupt>
  92:	00 00       	nop
  94:	eb c0       	rjmp	.+470    	; 0x26c <__bad_interrupt>
  96:	00 00       	nop
  98:	e9 c0       	rjmp	.+466    	; 0x26c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	e7 c0       	rjmp	.+462    	; 0x26c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	e5 c0       	rjmp	.+458    	; 0x26c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e3 c0       	rjmp	.+454    	; 0x26c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	e1 c0       	rjmp	.+450    	; 0x26c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	df c0       	rjmp	.+446    	; 0x26c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	dd c0       	rjmp	.+442    	; 0x26c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	db c0       	rjmp	.+438    	; 0x26c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	d9 c0       	rjmp	.+434    	; 0x26c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	d7 c0       	rjmp	.+430    	; 0x26c <__bad_interrupt>
  be:	00 00       	nop
  c0:	d5 c0       	rjmp	.+426    	; 0x26c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	d3 c0       	rjmp	.+422    	; 0x26c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	d1 c0       	rjmp	.+418    	; 0x26c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	cf c0       	rjmp	.+414    	; 0x26c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	cd c0       	rjmp	.+410    	; 0x26c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	cb c0       	rjmp	.+406    	; 0x26c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	c9 c0       	rjmp	.+402    	; 0x26c <__bad_interrupt>
  da:	00 00       	nop
  dc:	c7 c0       	rjmp	.+398    	; 0x26c <__bad_interrupt>
  de:	00 00       	nop
  e0:	c5 c0       	rjmp	.+394    	; 0x26c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	bf 04       	cpc	r11, r15
  e6:	c2 04       	cpc	r12, r2
  e8:	b1 04       	cpc	r11, r1
  ea:	b5 04       	cpc	r11, r5
  ec:	bb 04       	cpc	r11, r11
  ee:	f9 04       	cpc	r15, r9
  f0:	c6 04       	cpc	r12, r6
  f2:	ca 04       	cpc	r12, r10
  f4:	d0 04       	cpc	r13, r0
  f6:	d4 04       	cpc	r13, r4
  f8:	d8 04       	cpc	r13, r8
  fa:	de 04       	cpc	r13, r14
  fc:	e2 04       	cpc	r14, r2
  fe:	e6 04       	cpc	r14, r6
 100:	f9 04       	cpc	r15, r9
 102:	ec 04       	cpc	r14, r12
 104:	f0 04       	cpc	r15, r0
 106:	f4 04       	cpc	r15, r4

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
 20e:	23 03       	mulsu	r18, r19

00000210 <__ctors_end>:
 210:	11 24       	eor	r1, r1
 212:	1f be       	out	0x3f, r1	; 63
 214:	cf ef       	ldi	r28, 0xFF	; 255
 216:	d1 e2       	ldi	r29, 0x21	; 33
 218:	de bf       	out	0x3e, r29	; 62
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	0c bf       	out	0x3c, r16	; 60

00000220 <__do_copy_data>:
 220:	12 e0       	ldi	r17, 0x02	; 2
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b2 e0       	ldi	r27, 0x02	; 2
 226:	e2 e2       	ldi	r30, 0x22	; 34
 228:	fb e0       	ldi	r31, 0x0B	; 11
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	0b bf       	out	0x3b, r16	; 59
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x14>
 230:	07 90       	elpm	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	a8 31       	cpi	r26, 0x18	; 24
 236:	b1 07       	cpc	r27, r17
 238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0x10>

0000023a <__do_clear_bss>:
 23a:	22 e0       	ldi	r18, 0x02	; 2
 23c:	a8 e1       	ldi	r26, 0x18	; 24
 23e:	b2 e0       	ldi	r27, 0x02	; 2
 240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
 242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
 244:	ae 3b       	cpi	r26, 0xBE	; 190
 246:	b2 07       	cpc	r27, r18
 248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>

0000024a <__do_global_ctors>:
 24a:	11 e0       	ldi	r17, 0x01	; 1
 24c:	c8 e0       	ldi	r28, 0x08	; 8
 24e:	d1 e0       	ldi	r29, 0x01	; 1
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	05 c0       	rjmp	.+10     	; 0x25e <__do_global_ctors+0x14>
 254:	21 97       	sbiw	r28, 0x01	; 1
 256:	01 09       	sbc	r16, r1
 258:	80 2f       	mov	r24, r16
 25a:	fe 01       	movw	r30, r28
 25c:	58 d4       	rcall	.+2224   	; 0xb0e <__tablejump2__>
 25e:	c7 30       	cpi	r28, 0x07	; 7
 260:	d1 07       	cpc	r29, r17
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 07       	cpc	r16, r24
 266:	b1 f7       	brne	.-20     	; 0x254 <__do_global_ctors+0xa>
 268:	1c d2       	rcall	.+1080   	; 0x6a2 <main>
 26a:	59 c4       	rjmp	.+2226   	; 0xb1e <_exit>

0000026c <__bad_interrupt>:
 26c:	c9 ce       	rjmp	.-622    	; 0x0 <__vectors>

0000026e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 26e:	26 e0       	ldi	r18, 0x06	; 6
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	55 e2       	ldi	r21, 0x25	; 37
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	88 e1       	ldi	r24, 0x18	; 24
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	19 d1       	rcall	.+562    	; 0x4b0 <_ZN14HardwareSerial5beginEmh>

// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  Serial.begin(9600);
  Serial.print("Hello");
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	72 e0       	ldi	r23, 0x02	; 2
 282:	88 e1       	ldi	r24, 0x18	; 24
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	56 d2       	rcall	.+1196   	; 0x734 <_ZN5Print5printEPKc>
  pinMode(LED_BUILTIN, OUTPUT);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	8d e0       	ldi	r24, 0x0D	; 13
 28c:	b3 c3       	rjmp	.+1894   	; 0x9f4 <pinMode>

0000028e <loop>:
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	8d e0       	ldi	r24, 0x0D	; 13
 292:	ec d3       	rcall	.+2008   	; 0xa6c <digitalWrite>
  delay(100);                       // wait for a second
 294:	64 e6       	ldi	r22, 0x64	; 100
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	bb d2       	rcall	.+1398   	; 0x814 <delay>
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	e4 d3       	rcall	.+1992   	; 0xa6c <digitalWrite>
  delay(100);                       // wait for a second
 2a4:	64 e6       	ldi	r22, 0x64	; 100
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	b3 c2       	rjmp	.+1382   	; 0x814 <delay>

000002ae <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2ae:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2b0:	91 8d       	ldd	r25, Z+25	; 0x19
 2b2:	22 8d       	ldd	r18, Z+26	; 0x1a
 2b4:	89 2f       	mov	r24, r25
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	80 5c       	subi	r24, 0xC0	; 192
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
 2bc:	82 1b       	sub	r24, r18
 2be:	91 09       	sbc	r25, r1
}
 2c0:	8f 73       	andi	r24, 0x3F	; 63
 2c2:	99 27       	eor	r25, r25
 2c4:	08 95       	ret

000002c6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2c6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2c8:	91 8d       	ldd	r25, Z+25	; 0x19
 2ca:	82 8d       	ldd	r24, Z+26	; 0x1a
 2cc:	98 17       	cp	r25, r24
 2ce:	31 f0       	breq	.+12     	; 0x2dc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2d0:	82 8d       	ldd	r24, Z+26	; 0x1a
 2d2:	e8 0f       	add	r30, r24
 2d4:	f1 1d       	adc	r31, r1
 2d6:	85 8d       	ldd	r24, Z+29	; 0x1d
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2e0:	08 95       	ret

000002e2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2e2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2e4:	91 8d       	ldd	r25, Z+25	; 0x19
 2e6:	82 8d       	ldd	r24, Z+26	; 0x1a
 2e8:	98 17       	cp	r25, r24
 2ea:	61 f0       	breq	.+24     	; 0x304 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2ec:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ee:	df 01       	movw	r26, r30
 2f0:	a8 0f       	add	r26, r24
 2f2:	b1 1d       	adc	r27, r1
 2f4:	5d 96       	adiw	r26, 0x1d	; 29
 2f6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2f8:	92 8d       	ldd	r25, Z+26	; 0x1a
 2fa:	9f 5f       	subi	r25, 0xFF	; 255
 2fc:	9f 73       	andi	r25, 0x3F	; 63
 2fe:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 308:	08 95       	ret

0000030a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 30a:	fc 01       	movw	r30, r24
 30c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 30e:	44 8d       	ldd	r20, Z+28	; 0x1c
 310:	25 2f       	mov	r18, r21
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	84 2f       	mov	r24, r20
 316:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 318:	82 1b       	sub	r24, r18
 31a:	93 0b       	sbc	r25, r19
 31c:	54 17       	cp	r21, r20
 31e:	10 f0       	brcs	.+4      	; 0x324 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 320:	cf 96       	adiw	r24, 0x3f	; 63
 322:	08 95       	ret
  return tail - head - 1;
 324:	01 97       	sbiw	r24, 0x01	; 1
}
 326:	08 95       	ret

00000328 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 328:	8a e1       	ldi	r24, 0x1A	; 26
 32a:	93 e0       	ldi	r25, 0x03	; 3
 32c:	89 2b       	or	r24, r25
 32e:	39 f0       	breq	.+14     	; 0x33e <_Z14serialEventRunv+0x16>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	89 2b       	or	r24, r25
 336:	19 f0       	breq	.+6      	; 0x33e <_Z14serialEventRunv+0x16>
 338:	7d d1       	rcall	.+762    	; 0x634 <_Z17Serial0_availablev>
 33a:	81 11       	cpse	r24, r1
 33c:	25 c0       	rjmp	.+74     	; 0x388 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	89 2b       	or	r24, r25
 344:	41 f0       	breq	.+16     	; 0x356 <_Z14serialEventRunv+0x2e>
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	89 2b       	or	r24, r25
 34c:	21 f0       	breq	.+8      	; 0x356 <_Z14serialEventRunv+0x2e>
 34e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 352:	81 11       	cpse	r24, r1
 354:	1c c0       	rjmp	.+56     	; 0x38e <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	89 2b       	or	r24, r25
 35c:	41 f0       	breq	.+16     	; 0x36e <_Z14serialEventRunv+0x46>
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	89 2b       	or	r24, r25
 364:	21 f0       	breq	.+8      	; 0x36e <_Z14serialEventRunv+0x46>
 366:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 36a:	81 11       	cpse	r24, r1
 36c:	13 c0       	rjmp	.+38     	; 0x394 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	89 2b       	or	r24, r25
 374:	a1 f0       	breq	.+40     	; 0x39e <_Z14serialEventRunv+0x76>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	89 2b       	or	r24, r25
 37c:	81 f0       	breq	.+32     	; 0x39e <_Z14serialEventRunv+0x76>
 37e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 382:	81 11       	cpse	r24, r1
 384:	0a c0       	rjmp	.+20     	; 0x39a <_Z14serialEventRunv+0x72>
 386:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 388:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 38c:	d8 cf       	rjmp	.-80     	; 0x33e <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 38e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 392:	e1 cf       	rjmp	.-62     	; 0x356 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 394:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 398:	ea cf       	rjmp	.-44     	; 0x36e <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 39a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 39e:	08 95       	ret

000003a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3a0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3a2:	84 8d       	ldd	r24, Z+28	; 0x1c
 3a4:	df 01       	movw	r26, r30
 3a6:	a8 0f       	add	r26, r24
 3a8:	b1 1d       	adc	r27, r1
 3aa:	a3 5a       	subi	r26, 0xA3	; 163
 3ac:	bf 4f       	sbci	r27, 0xFF	; 255
 3ae:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3b0:	84 8d       	ldd	r24, Z+28	; 0x1c
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	8f 73       	andi	r24, 0x3F	; 63
 3b8:	99 27       	eor	r25, r25
 3ba:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3bc:	a6 89       	ldd	r26, Z+22	; 0x16
 3be:	b7 89       	ldd	r27, Z+23	; 0x17
 3c0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 3c2:	a0 89       	ldd	r26, Z+16	; 0x10
 3c4:	b1 89       	ldd	r27, Z+17	; 0x11
 3c6:	8c 91       	ld	r24, X
 3c8:	80 64       	ori	r24, 0x40	; 64
 3ca:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 3cc:	93 8d       	ldd	r25, Z+27	; 0x1b
 3ce:	84 8d       	ldd	r24, Z+28	; 0x1c
 3d0:	98 13       	cpse	r25, r24
 3d2:	06 c0       	rjmp	.+12     	; 0x3e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 3d4:	02 88       	ldd	r0, Z+18	; 0x12
 3d6:	f3 89       	ldd	r31, Z+19	; 0x13
 3d8:	e0 2d       	mov	r30, r0
 3da:	80 81       	ld	r24, Z
 3dc:	8f 7d       	andi	r24, 0xDF	; 223
 3de:	80 83       	st	Z, r24
 3e0:	08 95       	ret

000003e2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	ec 01       	movw	r28, r24
  _written = true;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 3f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3f8:	98 13       	cpse	r25, r24
 3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	e8 89       	ldd	r30, Y+16	; 0x10
 3fe:	f9 89       	ldd	r31, Y+17	; 0x11
 400:	80 81       	ld	r24, Z
 402:	85 fd       	sbrc	r24, 5
 404:	23 c0       	rjmp	.+70     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 406:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 408:	0b 8d       	ldd	r16, Y+27	; 0x1b
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	0f 5f       	subi	r16, 0xFF	; 255
 40e:	1f 4f       	sbci	r17, 0xFF	; 255
 410:	0f 73       	andi	r16, 0x3F	; 63
 412:	11 27       	eor	r17, r17
 414:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 416:	8c 8d       	ldd	r24, Y+28	; 0x1c
 418:	e8 12       	cpse	r14, r24
 41a:	0b c0       	rjmp	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
    if (bit_is_clear(SREG, SREG_I)) {
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	07 fc       	sbrc	r0, 7
 420:	fa cf       	rjmp	.-12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 422:	e8 89       	ldd	r30, Y+16	; 0x10
 424:	f9 89       	ldd	r31, Y+17	; 0x11
 426:	80 81       	ld	r24, Z
 428:	85 ff       	sbrs	r24, 5
 42a:	f5 cf       	rjmp	.-22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	_tx_udr_empty_irq();
 42c:	ce 01       	movw	r24, r28
 42e:	b8 df       	rcall	.-144    	; 0x3a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 430:	f2 cf       	rjmp	.-28     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 432:	8b 8d       	ldd	r24, Y+27	; 0x1b
 434:	fe 01       	movw	r30, r28
 436:	e8 0f       	add	r30, r24
 438:	f1 1d       	adc	r31, r1
 43a:	e3 5a       	subi	r30, 0xA3	; 163
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 440:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 442:	ea 89       	ldd	r30, Y+18	; 0x12
 444:	fb 89       	ldd	r31, Y+19	; 0x13
 446:	80 81       	ld	r24, Z
 448:	80 62       	ori	r24, 0x20	; 32
 44a:	07 c0       	rjmp	.+14     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 44c:	ee 89       	ldd	r30, Y+22	; 0x16
 44e:	ff 89       	ldd	r31, Y+23	; 0x17
 450:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 452:	e8 89       	ldd	r30, Y+16	; 0x10
 454:	f9 89       	ldd	r31, Y+17	; 0x11
 456:	80 81       	ld	r24, Z
 458:	80 64       	ori	r24, 0x40	; 64
 45a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	08 95       	ret

0000046e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 474:	88 8d       	ldd	r24, Y+24	; 0x18
 476:	88 23       	and	r24, r24
 478:	c1 f0       	breq	.+48     	; 0x4aa <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 47a:	ea 89       	ldd	r30, Y+18	; 0x12
 47c:	fb 89       	ldd	r31, Y+19	; 0x13
 47e:	80 81       	ld	r24, Z
 480:	85 fd       	sbrc	r24, 5
 482:	05 c0       	rjmp	.+10     	; 0x48e <_ZN14HardwareSerial5flushEv+0x20>
 484:	a8 89       	ldd	r26, Y+16	; 0x10
 486:	b9 89       	ldd	r27, Y+17	; 0x11
 488:	8c 91       	ld	r24, X
 48a:	86 fd       	sbrc	r24, 6
 48c:	0e c0       	rjmp	.+28     	; 0x4aa <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	07 fc       	sbrc	r0, 7
 492:	f5 cf       	rjmp	.-22     	; 0x47e <_ZN14HardwareSerial5flushEv+0x10>
 494:	80 81       	ld	r24, Z
 496:	85 ff       	sbrs	r24, 5
 498:	f2 cf       	rjmp	.-28     	; 0x47e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 49a:	a8 89       	ldd	r26, Y+16	; 0x10
 49c:	b9 89       	ldd	r27, Y+17	; 0x11
 49e:	8c 91       	ld	r24, X
 4a0:	85 ff       	sbrs	r24, 5
 4a2:	ed cf       	rjmp	.-38     	; 0x47e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4a4:	ce 01       	movw	r24, r28
 4a6:	7c df       	rcall	.-264    	; 0x3a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4a8:	e8 cf       	rjmp	.-48     	; 0x47a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4b0:	cf 92       	push	r12
 4b2:	df 92       	push	r13
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	ec 01       	movw	r28, r24
 4c0:	6a 01       	movw	r12, r20
 4c2:	7b 01       	movw	r14, r22
 4c4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 4c6:	e8 89       	ldd	r30, Y+16	; 0x10
 4c8:	f9 89       	ldd	r31, Y+17	; 0x11
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4ce:	41 15       	cp	r20, r1
 4d0:	51 4e       	sbci	r21, 0xE1	; 225
 4d2:	61 05       	cpc	r22, r1
 4d4:	71 05       	cpc	r23, r1
 4d6:	a9 f0       	breq	.+42     	; 0x502 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	79 e0       	ldi	r23, 0x09	; 9
 4dc:	8d e3       	ldi	r24, 0x3D	; 61
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	a7 01       	movw	r20, r14
 4e2:	96 01       	movw	r18, r12
 4e4:	f2 d2       	rcall	.+1508   	; 0xaca <__udivmodsi4>
 4e6:	da 01       	movw	r26, r20
 4e8:	c9 01       	movw	r24, r18
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	a1 09       	sbc	r26, r1
 4ee:	b1 09       	sbc	r27, r1
 4f0:	b6 95       	lsr	r27
 4f2:	a7 95       	ror	r26
 4f4:	97 95       	ror	r25
 4f6:	87 95       	ror	r24
 4f8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4fa:	21 15       	cp	r18, r1
 4fc:	80 e1       	ldi	r24, 0x10	; 16
 4fe:	38 07       	cpc	r19, r24
 500:	a0 f0       	brcs	.+40     	; 0x52a <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 502:	e8 89       	ldd	r30, Y+16	; 0x10
 504:	f9 89       	ldd	r31, Y+17	; 0x11
 506:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 508:	60 e8       	ldi	r22, 0x80	; 128
 50a:	74 e8       	ldi	r23, 0x84	; 132
 50c:	8e e1       	ldi	r24, 0x1E	; 30
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	a7 01       	movw	r20, r14
 512:	96 01       	movw	r18, r12
 514:	da d2       	rcall	.+1460   	; 0xaca <__udivmodsi4>
 516:	da 01       	movw	r26, r20
 518:	c9 01       	movw	r24, r18
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	a1 09       	sbc	r26, r1
 51e:	b1 09       	sbc	r27, r1
 520:	b6 95       	lsr	r27
 522:	a7 95       	ror	r26
 524:	97 95       	ror	r25
 526:	87 95       	ror	r24
 528:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 52a:	ec 85       	ldd	r30, Y+12	; 0x0c
 52c:	fd 85       	ldd	r31, Y+13	; 0x0d
 52e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 530:	ee 85       	ldd	r30, Y+14	; 0x0e
 532:	ff 85       	ldd	r31, Y+15	; 0x0f
 534:	20 83       	st	Z, r18

  _written = false;
 536:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 538:	ec 89       	ldd	r30, Y+20	; 0x14
 53a:	fd 89       	ldd	r31, Y+21	; 0x15
 53c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 53e:	ea 89       	ldd	r30, Y+18	; 0x12
 540:	fb 89       	ldd	r31, Y+19	; 0x13
 542:	80 81       	ld	r24, Z
 544:	80 61       	ori	r24, 0x10	; 16
 546:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 548:	ea 89       	ldd	r30, Y+18	; 0x12
 54a:	fb 89       	ldd	r31, Y+19	; 0x13
 54c:	80 81       	ld	r24, Z
 54e:	88 60       	ori	r24, 0x08	; 8
 550:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 552:	ea 89       	ldd	r30, Y+18	; 0x12
 554:	fb 89       	ldd	r31, Y+19	; 0x13
 556:	80 81       	ld	r24, Z
 558:	80 68       	ori	r24, 0x80	; 128
 55a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 55c:	ea 89       	ldd	r30, Y+18	; 0x12
 55e:	fb 89       	ldd	r31, Y+19	; 0x13
 560:	80 81       	ld	r24, Z
 562:	8f 7d       	andi	r24, 0xDF	; 223
 564:	80 83       	st	Z, r24
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	df 90       	pop	r13
 572:	cf 90       	pop	r12
 574:	08 95       	ret

00000576 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	0b b6       	in	r0, 0x3b	; 59
 582:	0f 92       	push	r0
 584:	2f 93       	push	r18
 586:	8f 93       	push	r24
 588:	9f 93       	push	r25
 58a:	ef 93       	push	r30
 58c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 58e:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <__data_end+0x10>
 592:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <__data_end+0x11>
 596:	80 81       	ld	r24, Z
 598:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <__data_end+0x16>
 59c:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <__data_end+0x17>
 5a0:	82 fd       	sbrc	r24, 2
 5a2:	12 c0       	rjmp	.+36     	; 0x5c8 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5a4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5a6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <__data_end+0x19>
 5aa:	8f 5f       	subi	r24, 0xFF	; 255
 5ac:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5ae:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <__data_end+0x1a>
 5b2:	82 17       	cp	r24, r18
 5b4:	51 f0       	breq	.+20     	; 0x5ca <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 5b6:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <__data_end+0x19>
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	e8 5e       	subi	r30, 0xE8	; 232
 5be:	fd 4f       	sbci	r31, 0xFD	; 253
 5c0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5c2:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__data_end+0x19>
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5c8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 5ca:	ff 91       	pop	r31
 5cc:	ef 91       	pop	r30
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0b be       	out	0x3b, r0	; 59
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	0b b6       	in	r0, 0x3b	; 59
 5ee:	0f 92       	push	r0
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 608:	88 e1       	ldi	r24, 0x18	; 24
 60a:	92 e0       	ldi	r25, 0x02	; 2
 60c:	c9 de       	rcall	.-622    	; 0x3a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0b be       	out	0x3b, r0	; 59
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 634:	88 e1       	ldi	r24, 0x18	; 24
 636:	92 e0       	ldi	r25, 0x02	; 2
 638:	3a de       	rcall	.-908    	; 0x2ae <_ZN14HardwareSerial9availableEv>
 63a:	21 e0       	ldi	r18, 0x01	; 1
 63c:	89 2b       	or	r24, r25
 63e:	09 f4       	brne	.+2      	; 0x642 <_Z17Serial0_availablev+0xe>
 640:	20 e0       	ldi	r18, 0x00	; 0
}
 642:	82 2f       	mov	r24, r18
 644:	08 95       	ret

00000646 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 646:	e8 e1       	ldi	r30, 0x18	; 24
 648:	f2 e0       	ldi	r31, 0x02	; 2
 64a:	13 82       	std	Z+3, r1	; 0x03
 64c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 64e:	88 ee       	ldi	r24, 0xE8	; 232
 650:	93 e0       	ldi	r25, 0x03	; 3
 652:	a0 e0       	ldi	r26, 0x00	; 0
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	84 83       	std	Z+4, r24	; 0x04
 658:	95 83       	std	Z+5, r25	; 0x05
 65a:	a6 83       	std	Z+6, r26	; 0x06
 65c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 65e:	8a e0       	ldi	r24, 0x0A	; 10
 660:	92 e0       	ldi	r25, 0x02	; 2
 662:	91 83       	std	Z+1, r25	; 0x01
 664:	80 83       	st	Z, r24
 666:	85 ec       	ldi	r24, 0xC5	; 197
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	95 87       	std	Z+13, r25	; 0x0d
 66c:	84 87       	std	Z+12, r24	; 0x0c
 66e:	84 ec       	ldi	r24, 0xC4	; 196
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	97 87       	std	Z+15, r25	; 0x0f
 674:	86 87       	std	Z+14, r24	; 0x0e
 676:	80 ec       	ldi	r24, 0xC0	; 192
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	91 8b       	std	Z+17, r25	; 0x11
 67c:	80 8b       	std	Z+16, r24	; 0x10
 67e:	81 ec       	ldi	r24, 0xC1	; 193
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	93 8b       	std	Z+19, r25	; 0x13
 684:	82 8b       	std	Z+18, r24	; 0x12
 686:	82 ec       	ldi	r24, 0xC2	; 194
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	95 8b       	std	Z+21, r25	; 0x15
 68c:	84 8b       	std	Z+20, r24	; 0x14
 68e:	86 ec       	ldi	r24, 0xC6	; 198
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	97 8b       	std	Z+23, r25	; 0x17
 694:	86 8b       	std	Z+22, r24	; 0x16
 696:	11 8e       	std	Z+25, r1	; 0x19
 698:	12 8e       	std	Z+26, r1	; 0x1a
 69a:	13 8e       	std	Z+27, r1	; 0x1b
 69c:	14 8e       	std	Z+28, r1	; 0x1c
 69e:	08 95       	ret

000006a0 <initVariant>:
 6a0:	08 95       	ret

000006a2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6a2:	f1 d0       	rcall	.+482    	; 0x886 <init>

	initVariant();
 6a4:	fd df       	rcall	.-6      	; 0x6a0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6a6:	e3 dd       	rcall	.-1082   	; 0x26e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6a8:	c4 e9       	ldi	r28, 0x94	; 148
 6aa:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 6ac:	f0 dd       	rcall	.-1056   	; 0x28e <loop>
		if (serialEventRun) serialEventRun();
 6ae:	20 97       	sbiw	r28, 0x00	; 0
 6b0:	e9 f3       	breq	.-6      	; 0x6ac <main+0xa>
 6b2:	3a de       	rcall	.-908    	; 0x328 <_Z14serialEventRunv>
 6b4:	fb cf       	rjmp	.-10     	; 0x6ac <main+0xa>

000006b6 <_ZN5Print5writeEPKhj>:
 6b6:	cf 92       	push	r12
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
 6b8:	df 92       	push	r13
 6ba:	ef 92       	push	r14
 6bc:	ff 92       	push	r15
 6be:	0f 93       	push	r16
 6c0:	1f 93       	push	r17
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	6c 01       	movw	r12, r24
 6c8:	7a 01       	movw	r14, r20
 6ca:	8b 01       	movw	r16, r22
 6cc:	c0 e0       	ldi	r28, 0x00	; 0
 6ce:	d0 e0       	ldi	r29, 0x00	; 0
 6d0:	ce 15       	cp	r28, r14
 6d2:	df 05       	cpc	r29, r15
 6d4:	81 f0       	breq	.+32     	; 0x6f6 <_ZN5Print5writeEPKhj+0x40>
 6d6:	d8 01       	movw	r26, r16
 6d8:	6d 91       	ld	r22, X+
 6da:	8d 01       	movw	r16, r26
 6dc:	d6 01       	movw	r26, r12
 6de:	ed 91       	ld	r30, X+
 6e0:	fc 91       	ld	r31, X
 6e2:	01 90       	ld	r0, Z+
 6e4:	f0 81       	ld	r31, Z
 6e6:	e0 2d       	mov	r30, r0
 6e8:	c6 01       	movw	r24, r12
 6ea:	19 95       	eicall
 6ec:	89 2b       	or	r24, r25
 6ee:	11 f0       	breq	.+4      	; 0x6f4 <_ZN5Print5writeEPKhj+0x3e>
 6f0:	21 96       	adiw	r28, 0x01	; 1
 6f2:	ee cf       	rjmp	.-36     	; 0x6d0 <_ZN5Print5writeEPKhj+0x1a>
 6f4:	7e 01       	movw	r14, r28
 6f6:	c7 01       	movw	r24, r14
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	ff 90       	pop	r15
 702:	ef 90       	pop	r14
 704:	df 90       	pop	r13
 706:	cf 90       	pop	r12
 708:	08 95       	ret

0000070a <_ZN5Print5writeEPKc>:
 70a:	61 15       	cp	r22, r1
 70c:	71 05       	cpc	r23, r1
 70e:	79 f0       	breq	.+30     	; 0x72e <_ZN5Print5writeEPKc+0x24>
 710:	fb 01       	movw	r30, r22
 712:	01 90       	ld	r0, Z+
 714:	00 20       	and	r0, r0
 716:	e9 f7       	brne	.-6      	; 0x712 <_ZN5Print5writeEPKc+0x8>
 718:	31 97       	sbiw	r30, 0x01	; 1
 71a:	af 01       	movw	r20, r30
 71c:	46 1b       	sub	r20, r22
 71e:	57 0b       	sbc	r21, r23
 720:	dc 01       	movw	r26, r24
 722:	ed 91       	ld	r30, X+
 724:	fc 91       	ld	r31, X
 726:	02 80       	ldd	r0, Z+2	; 0x02
 728:	f3 81       	ldd	r31, Z+3	; 0x03
 72a:	e0 2d       	mov	r30, r0
 72c:	19 94       	eijmp
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	08 95       	ret

00000734 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 734:	ea cf       	rjmp	.-44     	; 0x70a <_ZN5Print5writeEPKc>

00000736 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	0f 92       	push	r0
 73e:	11 24       	eor	r1, r1
 740:	2f 93       	push	r18
 742:	3f 93       	push	r19
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <timer0_millis>
 750:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <timer0_millis+0x1>
 754:	a0 91 b8 02 	lds	r26, 0x02B8	; 0x8002b8 <timer0_millis+0x2>
 758:	b0 91 b9 02 	lds	r27, 0x02B9	; 0x8002b9 <timer0_millis+0x3>
 75c:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <timer0_fract>
 760:	23 e0       	ldi	r18, 0x03	; 3
 762:	23 0f       	add	r18, r19
 764:	2d 37       	cpi	r18, 0x7D	; 125
 766:	20 f4       	brcc	.+8      	; 0x770 <__vector_23+0x3a>
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	a1 1d       	adc	r26, r1
 76c:	b1 1d       	adc	r27, r1
 76e:	05 c0       	rjmp	.+10     	; 0x77a <__vector_23+0x44>
 770:	26 e8       	ldi	r18, 0x86	; 134
 772:	23 0f       	add	r18, r19
 774:	02 96       	adiw	r24, 0x02	; 2
 776:	a1 1d       	adc	r26, r1
 778:	b1 1d       	adc	r27, r1
 77a:	20 93 b5 02 	sts	0x02B5, r18	; 0x8002b5 <timer0_fract>
 77e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <timer0_millis>
 782:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <timer0_millis+0x1>
 786:	a0 93 b8 02 	sts	0x02B8, r26	; 0x8002b8 <timer0_millis+0x2>
 78a:	b0 93 b9 02 	sts	0x02B9, r27	; 0x8002b9 <timer0_millis+0x3>
 78e:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <timer0_overflow_count>
 792:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <timer0_overflow_count+0x1>
 796:	a0 91 bc 02 	lds	r26, 0x02BC	; 0x8002bc <timer0_overflow_count+0x2>
 79a:	b0 91 bd 02 	lds	r27, 0x02BD	; 0x8002bd <timer0_overflow_count+0x3>
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	a1 1d       	adc	r26, r1
 7a2:	b1 1d       	adc	r27, r1
 7a4:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <timer0_overflow_count>
 7a8:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <timer0_overflow_count+0x1>
 7ac:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <timer0_overflow_count+0x2>
 7b0:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <timer0_overflow_count+0x3>
 7b4:	bf 91       	pop	r27
 7b6:	af 91       	pop	r26
 7b8:	9f 91       	pop	r25
 7ba:	8f 91       	pop	r24
 7bc:	3f 91       	pop	r19
 7be:	2f 91       	pop	r18
 7c0:	0f 90       	pop	r0
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	0f 90       	pop	r0
 7c6:	1f 90       	pop	r1
 7c8:	18 95       	reti

000007ca <micros>:
 7ca:	3f b7       	in	r19, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <timer0_overflow_count>
 7d2:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <timer0_overflow_count+0x1>
 7d6:	a0 91 bc 02 	lds	r26, 0x02BC	; 0x8002bc <timer0_overflow_count+0x2>
 7da:	b0 91 bd 02 	lds	r27, 0x02BD	; 0x8002bd <timer0_overflow_count+0x3>
 7de:	26 b5       	in	r18, 0x26	; 38
 7e0:	a8 9b       	sbis	0x15, 0	; 21
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <micros+0x24>
 7e4:	2f 3f       	cpi	r18, 0xFF	; 255
 7e6:	19 f0       	breq	.+6      	; 0x7ee <micros+0x24>
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	a1 1d       	adc	r26, r1
 7ec:	b1 1d       	adc	r27, r1
 7ee:	3f bf       	out	0x3f, r19	; 63
 7f0:	ba 2f       	mov	r27, r26
 7f2:	a9 2f       	mov	r26, r25
 7f4:	98 2f       	mov	r25, r24
 7f6:	88 27       	eor	r24, r24
 7f8:	82 0f       	add	r24, r18
 7fa:	91 1d       	adc	r25, r1
 7fc:	a1 1d       	adc	r26, r1
 7fe:	b1 1d       	adc	r27, r1
 800:	bc 01       	movw	r22, r24
 802:	cd 01       	movw	r24, r26
 804:	42 e0       	ldi	r20, 0x02	; 2
 806:	66 0f       	add	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	4a 95       	dec	r20
 810:	d1 f7       	brne	.-12     	; 0x806 <micros+0x3c>
 812:	08 95       	ret

00000814 <delay>:
 814:	8f 92       	push	r8
 816:	9f 92       	push	r9
 818:	af 92       	push	r10
 81a:	bf 92       	push	r11
 81c:	cf 92       	push	r12
 81e:	df 92       	push	r13
 820:	ef 92       	push	r14
 822:	ff 92       	push	r15
 824:	6b 01       	movw	r12, r22
 826:	7c 01       	movw	r14, r24
 828:	d0 df       	rcall	.-96     	; 0x7ca <micros>
 82a:	4b 01       	movw	r8, r22
 82c:	5c 01       	movw	r10, r24
 82e:	c1 14       	cp	r12, r1
 830:	d1 04       	cpc	r13, r1
 832:	e1 04       	cpc	r14, r1
 834:	f1 04       	cpc	r15, r1
 836:	f1 f0       	breq	.+60     	; 0x874 <delay+0x60>
 838:	47 d1       	rcall	.+654    	; 0xac8 <yield>
 83a:	c7 df       	rcall	.-114    	; 0x7ca <micros>
 83c:	dc 01       	movw	r26, r24
 83e:	cb 01       	movw	r24, r22
 840:	88 19       	sub	r24, r8
 842:	99 09       	sbc	r25, r9
 844:	aa 09       	sbc	r26, r10
 846:	bb 09       	sbc	r27, r11
 848:	88 3e       	cpi	r24, 0xE8	; 232
 84a:	93 40       	sbci	r25, 0x03	; 3
 84c:	a1 05       	cpc	r26, r1
 84e:	b1 05       	cpc	r27, r1
 850:	70 f3       	brcs	.-36     	; 0x82e <delay+0x1a>
 852:	21 e0       	ldi	r18, 0x01	; 1
 854:	c2 1a       	sub	r12, r18
 856:	d1 08       	sbc	r13, r1
 858:	e1 08       	sbc	r14, r1
 85a:	f1 08       	sbc	r15, r1
 85c:	88 ee       	ldi	r24, 0xE8	; 232
 85e:	88 0e       	add	r8, r24
 860:	83 e0       	ldi	r24, 0x03	; 3
 862:	98 1e       	adc	r9, r24
 864:	a1 1c       	adc	r10, r1
 866:	b1 1c       	adc	r11, r1
 868:	c1 14       	cp	r12, r1
 86a:	d1 04       	cpc	r13, r1
 86c:	e1 04       	cpc	r14, r1
 86e:	f1 04       	cpc	r15, r1
 870:	21 f7       	brne	.-56     	; 0x83a <delay+0x26>
 872:	dd cf       	rjmp	.-70     	; 0x82e <delay+0x1a>
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	df 90       	pop	r13
 87a:	cf 90       	pop	r12
 87c:	bf 90       	pop	r11
 87e:	af 90       	pop	r10
 880:	9f 90       	pop	r9
 882:	8f 90       	pop	r8
 884:	08 95       	ret

00000886 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 886:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 888:	84 b5       	in	r24, 0x24	; 36
 88a:	82 60       	ori	r24, 0x02	; 2
 88c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 88e:	84 b5       	in	r24, 0x24	; 36
 890:	81 60       	ori	r24, 0x01	; 1
 892:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 894:	85 b5       	in	r24, 0x25	; 37
 896:	82 60       	ori	r24, 0x02	; 2
 898:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 89a:	85 b5       	in	r24, 0x25	; 37
 89c:	81 60       	ori	r24, 0x01	; 1
 89e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8a0:	ee e6       	ldi	r30, 0x6E	; 110
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	81 60       	ori	r24, 0x01	; 1
 8a8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8aa:	e1 e8       	ldi	r30, 0x81	; 129
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8b0:	80 81       	ld	r24, Z
 8b2:	82 60       	ori	r24, 0x02	; 2
 8b4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8b6:	80 81       	ld	r24, Z
 8b8:	81 60       	ori	r24, 0x01	; 1
 8ba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8bc:	e0 e8       	ldi	r30, 0x80	; 128
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	81 60       	ori	r24, 0x01	; 1
 8c4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8c6:	e1 eb       	ldi	r30, 0xB1	; 177
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	84 60       	ori	r24, 0x04	; 4
 8ce:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8d0:	e0 eb       	ldi	r30, 0xB0	; 176
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	81 60       	ori	r24, 0x01	; 1
 8d8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 8da:	e1 e9       	ldi	r30, 0x91	; 145
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	82 60       	ori	r24, 0x02	; 2
 8e2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 8e4:	80 81       	ld	r24, Z
 8e6:	81 60       	ori	r24, 0x01	; 1
 8e8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 8ea:	e0 e9       	ldi	r30, 0x90	; 144
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	81 60       	ori	r24, 0x01	; 1
 8f2:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 8f4:	e1 ea       	ldi	r30, 0xA1	; 161
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	82 60       	ori	r24, 0x02	; 2
 8fc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 8fe:	80 81       	ld	r24, Z
 900:	81 60       	ori	r24, 0x01	; 1
 902:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 904:	e0 ea       	ldi	r30, 0xA0	; 160
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	81 60       	ori	r24, 0x01	; 1
 90c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 90e:	e1 e2       	ldi	r30, 0x21	; 33
 910:	f1 e0       	ldi	r31, 0x01	; 1
 912:	80 81       	ld	r24, Z
 914:	82 60       	ori	r24, 0x02	; 2
 916:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 918:	80 81       	ld	r24, Z
 91a:	81 60       	ori	r24, 0x01	; 1
 91c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 91e:	e0 e2       	ldi	r30, 0x20	; 32
 920:	f1 e0       	ldi	r31, 0x01	; 1
 922:	80 81       	ld	r24, Z
 924:	81 60       	ori	r24, 0x01	; 1
 926:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 928:	ea e7       	ldi	r30, 0x7A	; 122
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	80 81       	ld	r24, Z
 92e:	84 60       	ori	r24, 0x04	; 4
 930:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 932:	80 81       	ld	r24, Z
 934:	82 60       	ori	r24, 0x02	; 2
 936:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 938:	80 81       	ld	r24, Z
 93a:	81 60       	ori	r24, 0x01	; 1
 93c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 93e:	80 81       	ld	r24, Z
 940:	80 68       	ori	r24, 0x80	; 128
 942:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 944:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 948:	08 95       	ret

0000094a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	fc 01       	movw	r30, r24
 94e:	31 97       	sbiw	r30, 0x01	; 1
 950:	e2 31       	cpi	r30, 0x12	; 18
 952:	f1 05       	cpc	r31, r1
 954:	08 f0       	brcs	.+2      	; 0x958 <turnOffPWM+0xe>
 956:	4d c0       	rjmp	.+154    	; 0x9f2 <turnOffPWM+0xa8>
 958:	88 27       	eor	r24, r24
 95a:	ee 58       	subi	r30, 0x8E	; 142
 95c:	ff 4f       	sbci	r31, 0xFF	; 255
 95e:	8f 4f       	sbci	r24, 0xFF	; 255
 960:	d6 c0       	rjmp	.+428    	; 0xb0e <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 962:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 966:	8f 77       	andi	r24, 0x7F	; 127
 968:	03 c0       	rjmp	.+6      	; 0x970 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 96a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 96e:	8f 7d       	andi	r24, 0xDF	; 223
 970:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 974:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 976:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 97a:	87 7f       	andi	r24, 0xF7	; 247
 97c:	f9 cf       	rjmp	.-14     	; 0x970 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 97e:	84 b5       	in	r24, 0x24	; 36
 980:	8f 77       	andi	r24, 0x7F	; 127
 982:	02 c0       	rjmp	.+4      	; 0x988 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 984:	84 b5       	in	r24, 0x24	; 36
 986:	8f 7d       	andi	r24, 0xDF	; 223
 988:	84 bd       	out	0x24, r24	; 36
 98a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 98c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 990:	8f 77       	andi	r24, 0x7F	; 127
 992:	03 c0       	rjmp	.+6      	; 0x99a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 994:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 998:	8f 7d       	andi	r24, 0xDF	; 223
 99a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 99e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 9a0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 9a4:	8f 77       	andi	r24, 0x7F	; 127
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 9a8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 9ac:	8f 7d       	andi	r24, 0xDF	; 223
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 9b0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 9b4:	87 7f       	andi	r24, 0xF7	; 247
 9b6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 9ba:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 9bc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 9c0:	8f 77       	andi	r24, 0x7F	; 127
 9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 9c4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 9c8:	8f 7d       	andi	r24, 0xDF	; 223
 9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 9cc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 9d0:	87 7f       	andi	r24, 0xF7	; 247
 9d2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 9d6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 9d8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 9dc:	8f 77       	andi	r24, 0x7F	; 127
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 9e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 9e4:	8f 7d       	andi	r24, 0xDF	; 223
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 9e8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 9ec:	87 7f       	andi	r24, 0xF7	; 247
 9ee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 9f2:	08 95       	ret

000009f4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	fc 01       	movw	r30, r24
 9fc:	e2 5b       	subi	r30, 0xB2	; 178
 9fe:	fe 4f       	sbci	r31, 0xFE	; 254
 a00:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a02:	fc 01       	movw	r30, r24
 a04:	ec 56       	subi	r30, 0x6C	; 108
 a06:	fe 4f       	sbci	r31, 0xFE	; 254
 a08:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a0a:	88 23       	and	r24, r24
 a0c:	61 f1       	breq	.+88     	; 0xa66 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	88 0f       	add	r24, r24
 a12:	99 1f       	adc	r25, r25
 a14:	fc 01       	movw	r30, r24
 a16:	ec 50       	subi	r30, 0x0C	; 12
 a18:	fe 4f       	sbci	r31, 0xFE	; 254
 a1a:	c5 91       	lpm	r28, Z+
 a1c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a1e:	fc 01       	movw	r30, r24
 a20:	e6 52       	subi	r30, 0x26	; 38
 a22:	fe 4f       	sbci	r31, 0xFE	; 254
 a24:	a5 91       	lpm	r26, Z+
 a26:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a28:	61 11       	cpse	r22, r1
 a2a:	09 c0       	rjmp	.+18     	; 0xa3e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a2c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a2e:	f8 94       	cli
		*reg &= ~bit;
 a30:	88 81       	ld	r24, Y
 a32:	20 95       	com	r18
 a34:	82 23       	and	r24, r18
 a36:	88 83       	st	Y, r24
		*out &= ~bit;
 a38:	ec 91       	ld	r30, X
 a3a:	2e 23       	and	r18, r30
 a3c:	0b c0       	rjmp	.+22     	; 0xa54 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a3e:	62 30       	cpi	r22, 0x02	; 2
 a40:	61 f4       	brne	.+24     	; 0xa5a <pinMode+0x66>
		uint8_t oldSREG = SREG;
 a42:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a44:	f8 94       	cli
		*reg &= ~bit;
 a46:	88 81       	ld	r24, Y
 a48:	32 2f       	mov	r19, r18
 a4a:	30 95       	com	r19
 a4c:	83 23       	and	r24, r19
 a4e:	88 83       	st	Y, r24
		*out |= bit;
 a50:	ec 91       	ld	r30, X
 a52:	2e 2b       	or	r18, r30
 a54:	2c 93       	st	X, r18
		SREG = oldSREG;
 a56:	9f bf       	out	0x3f, r25	; 63
 a58:	06 c0       	rjmp	.+12     	; 0xa66 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 a5a:	8f b7       	in	r24, 0x3f	; 63
                cli();
 a5c:	f8 94       	cli
		*reg |= bit;
 a5e:	e8 81       	ld	r30, Y
 a60:	2e 2b       	or	r18, r30
 a62:	28 83       	st	Y, r18
		SREG = oldSREG;
 a64:	8f bf       	out	0x3f, r24	; 63
	}
}
 a66:	df 91       	pop	r29
 a68:	cf 91       	pop	r28
 a6a:	08 95       	ret

00000a6c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a72:	28 2f       	mov	r18, r24
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	f9 01       	movw	r30, r18
 a78:	e8 5f       	subi	r30, 0xF8	; 248
 a7a:	fe 4f       	sbci	r31, 0xFE	; 254
 a7c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a7e:	f9 01       	movw	r30, r18
 a80:	e2 5b       	subi	r30, 0xB2	; 178
 a82:	fe 4f       	sbci	r31, 0xFE	; 254
 a84:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a86:	f9 01       	movw	r30, r18
 a88:	ec 56       	subi	r30, 0x6C	; 108
 a8a:	fe 4f       	sbci	r31, 0xFE	; 254
 a8c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a8e:	cc 23       	and	r28, r28
 a90:	b9 f0       	breq	.+46     	; 0xac0 <digitalWrite+0x54>
 a92:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a94:	81 11       	cpse	r24, r1
 a96:	59 df       	rcall	.-334    	; 0x94a <turnOffPWM>

	out = portOutputRegister(port);
 a98:	ec 2f       	mov	r30, r28
 a9a:	f0 e0       	ldi	r31, 0x00	; 0
 a9c:	ee 0f       	add	r30, r30
 a9e:	ff 1f       	adc	r31, r31
 aa0:	e6 52       	subi	r30, 0x26	; 38
 aa2:	fe 4f       	sbci	r31, 0xFE	; 254
 aa4:	a5 91       	lpm	r26, Z+
 aa6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 aa8:	9f b7       	in	r25, 0x3f	; 63
	cli();
 aaa:	f8 94       	cli

	if (val == LOW) {
 aac:	11 11       	cpse	r17, r1
 aae:	04 c0       	rjmp	.+8      	; 0xab8 <digitalWrite+0x4c>
		*out &= ~bit;
 ab0:	8c 91       	ld	r24, X
 ab2:	d0 95       	com	r29
 ab4:	d8 23       	and	r29, r24
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <digitalWrite+0x50>
	} else {
		*out |= bit;
 ab8:	ec 91       	ld	r30, X
 aba:	de 2b       	or	r29, r30
 abc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 abe:	9f bf       	out	0x3f, r25	; 63
}
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	1f 91       	pop	r17
 ac6:	08 95       	ret

00000ac8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 ac8:	08 95       	ret

00000aca <__udivmodsi4>:
 aca:	a1 e2       	ldi	r26, 0x21	; 33
 acc:	1a 2e       	mov	r1, r26
 ace:	aa 1b       	sub	r26, r26
 ad0:	bb 1b       	sub	r27, r27
 ad2:	fd 01       	movw	r30, r26
 ad4:	0d c0       	rjmp	.+26     	; 0xaf0 <__udivmodsi4_ep>

00000ad6 <__udivmodsi4_loop>:
 ad6:	aa 1f       	adc	r26, r26
 ad8:	bb 1f       	adc	r27, r27
 ada:	ee 1f       	adc	r30, r30
 adc:	ff 1f       	adc	r31, r31
 ade:	a2 17       	cp	r26, r18
 ae0:	b3 07       	cpc	r27, r19
 ae2:	e4 07       	cpc	r30, r20
 ae4:	f5 07       	cpc	r31, r21
 ae6:	20 f0       	brcs	.+8      	; 0xaf0 <__udivmodsi4_ep>
 ae8:	a2 1b       	sub	r26, r18
 aea:	b3 0b       	sbc	r27, r19
 aec:	e4 0b       	sbc	r30, r20
 aee:	f5 0b       	sbc	r31, r21

00000af0 <__udivmodsi4_ep>:
 af0:	66 1f       	adc	r22, r22
 af2:	77 1f       	adc	r23, r23
 af4:	88 1f       	adc	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	1a 94       	dec	r1
 afa:	69 f7       	brne	.-38     	; 0xad6 <__udivmodsi4_loop>
 afc:	60 95       	com	r22
 afe:	70 95       	com	r23
 b00:	80 95       	com	r24
 b02:	90 95       	com	r25
 b04:	9b 01       	movw	r18, r22
 b06:	ac 01       	movw	r20, r24
 b08:	bd 01       	movw	r22, r26
 b0a:	cf 01       	movw	r24, r30
 b0c:	08 95       	ret

00000b0e <__tablejump2__>:
 b0e:	ee 0f       	add	r30, r30
 b10:	ff 1f       	adc	r31, r31
 b12:	88 1f       	adc	r24, r24
 b14:	8b bf       	out	0x3b, r24	; 59
 b16:	07 90       	elpm	r0, Z+
 b18:	f6 91       	elpm	r31, Z
 b1a:	e0 2d       	mov	r30, r0
 b1c:	19 94       	eijmp

00000b1e <_exit>:
 b1e:	f8 94       	cli

00000b20 <__stop_program>:
 b20:	ff cf       	rjmp	.-2      	; 0xb20 <__stop_program>
