
Lm32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a5  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000787  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017f  00000000  00000000  00001a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001ba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_uart>:
#define BAUD 19200
#define MYUBRR    F_CPU/16/BAUD-1

void init_uart(unsigned short uValue){
	// setting the baud rate
	UBRR0H =(unsigned char)  ( uValue>> 8);  // 0x00
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =(unsigned char) uValue;  // 0x0C
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// enabling TX & RX
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
	UCSR0A = (1<<UDRE0);
  8e:	80 e2       	ldi	r24, 0x20	; 32
  90:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0C =  (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stop
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  9a:	08 95       	ret

0000009c <adc_init>:

}

void adc_init(){
	ADMUX = (1<<REFS0);
  9c:	80 e4       	ldi	r24, 0x40	; 64
  9e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//Prescaler of 128
	ADCSRA  = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  a2:	87 e8       	ldi	r24, 0x87	; 135
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a8:	08 95       	ret

000000aa <adc_read>:
uint16_t adc_read(uint8_t ch){
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	98 7f       	andi	r25, 0xF8	; 248
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	89 2b       	or	r24, r25
  b6:	80 83       	st	Z, r24
	
	// start single convertion
	// write ’1? to ADSC
	ADCSRA |= (1<<ADSC);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes ’0? again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  c2:	80 81       	ld	r24, Z
  c4:	86 fd       	sbrc	r24, 6
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <adc_read+0x18>
	
	return (ADC);
  c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  d0:	08 95       	ret

000000d2 <main>:

int main(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	64 97       	sbiw	r28, 0x14	; 20
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x00;
  e6:	17 b8       	out	0x07, r1	; 7
    uint16_t res;
    init_uart(MYUBRR);
  e8:	89 e1       	ldi	r24, 0x19	; 25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 40 00 	call	0x80	; 0x80 <init_uart>
    adc_init();
  f0:	0e 94 4e 00 	call	0x9c	; 0x9c <adc_init>
  f4:	7e 01       	movw	r14, r28
  f6:	25 e1       	ldi	r18, 0x15	; 21
  f8:	e2 0e       	add	r14, r18
  fa:	f1 1c       	adc	r15, r1
		char buffer [20];
		itoa (res,buffer,10);
		for (int j=0; j<20;j++)
		{
			//printf(buffer);
			UDR0 = buffer[j];
  fc:	06 ec       	ldi	r16, 0xC6	; 198
  fe:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t res;
    init_uart(MYUBRR);
    adc_init();
    while (1) 
    {
		res = adc_read(0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 55 00 	call	0xaa	; 0xaa <adc_read>
		uint16_t mv = (res/1024)*5000;
		uint16_t cel = 10;
		char buffer [20];
		itoa (res,buffer,10);
 106:	4a e0       	ldi	r20, 0x0A	; 10
 108:	50 e0       	ldi	r21, 0x00	; 0
 10a:	be 01       	movw	r22, r28
 10c:	6f 5f       	subi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	0e 94 a2 00 	call	0x144	; 0x144 <itoa>
 114:	fe 01       	movw	r30, r28
 116:	31 96       	adiw	r30, 0x01	; 1
		for (int j=0; j<20;j++)
		{
			//printf(buffer);
			UDR0 = buffer[j];
 118:	81 91       	ld	r24, Z+
 11a:	d8 01       	movw	r26, r16
 11c:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	97 e2       	ldi	r25, 0x27	; 39
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x50>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x56>
 128:	00 00       	nop
		res = adc_read(0);
		uint16_t mv = (res/1024)*5000;
		uint16_t cel = 10;
		char buffer [20];
		itoa (res,buffer,10);
		for (int j=0; j<20;j++)
 12a:	ee 15       	cp	r30, r14
 12c:	ff 05       	cpc	r31, r15
 12e:	a1 f7       	brne	.-24     	; 0x118 <main+0x46>
 130:	9f ef       	ldi	r25, 0xFF	; 255
 132:	a9 e6       	ldi	r26, 0x69	; 105
 134:	b8 e1       	ldi	r27, 0x18	; 24
 136:	91 50       	subi	r25, 0x01	; 1
 138:	a0 40       	sbci	r26, 0x00	; 0
 13a:	b0 40       	sbci	r27, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x64>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x6e>
 140:	00 00       	nop
			UDR0 = buffer[j];
			_delay_ms(5);
		}
		
		_delay_ms(1000);
    }
 142:	de cf       	rjmp	.-68     	; 0x100 <main+0x2e>

00000144 <itoa>:
 144:	45 32       	cpi	r20, 0x25	; 37
 146:	51 05       	cpc	r21, r1
 148:	20 f4       	brcc	.+8      	; 0x152 <itoa+0xe>
 14a:	42 30       	cpi	r20, 0x02	; 2
 14c:	10 f0       	brcs	.+4      	; 0x152 <itoa+0xe>
 14e:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__itoa_ncheck>
 152:	fb 01       	movw	r30, r22
 154:	10 82       	st	Z, r1
 156:	cb 01       	movw	r24, r22
 158:	08 95       	ret

0000015a <__itoa_ncheck>:
 15a:	bb 27       	eor	r27, r27
 15c:	4a 30       	cpi	r20, 0x0A	; 10
 15e:	31 f4       	brne	.+12     	; 0x16c <__itoa_ncheck+0x12>
 160:	99 23       	and	r25, r25
 162:	22 f4       	brpl	.+8      	; 0x16c <__itoa_ncheck+0x12>
 164:	bd e2       	ldi	r27, 0x2D	; 45
 166:	90 95       	com	r25
 168:	81 95       	neg	r24
 16a:	9f 4f       	sbci	r25, 0xFF	; 255
 16c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__utoa_common>

00000170 <__utoa_ncheck>:
 170:	bb 27       	eor	r27, r27

00000172 <__utoa_common>:
 172:	fb 01       	movw	r30, r22
 174:	55 27       	eor	r21, r21
 176:	aa 27       	eor	r26, r26
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	aa 1f       	adc	r26, r26
 17e:	a4 17       	cp	r26, r20
 180:	10 f0       	brcs	.+4      	; 0x186 <__utoa_common+0x14>
 182:	a4 1b       	sub	r26, r20
 184:	83 95       	inc	r24
 186:	50 51       	subi	r21, 0x10	; 16
 188:	b9 f7       	brne	.-18     	; 0x178 <__utoa_common+0x6>
 18a:	a0 5d       	subi	r26, 0xD0	; 208
 18c:	aa 33       	cpi	r26, 0x3A	; 58
 18e:	08 f0       	brcs	.+2      	; 0x192 <__utoa_common+0x20>
 190:	a9 5d       	subi	r26, 0xD9	; 217
 192:	a1 93       	st	Z+, r26
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	79 f7       	brne	.-34     	; 0x176 <__utoa_common+0x4>
 198:	b1 11       	cpse	r27, r1
 19a:	b1 93       	st	Z+, r27
 19c:	11 92       	st	Z+, r1
 19e:	cb 01       	movw	r24, r22
 1a0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <strrev>

000001a4 <strrev>:
 1a4:	dc 01       	movw	r26, r24
 1a6:	fc 01       	movw	r30, r24
 1a8:	67 2f       	mov	r22, r23
 1aa:	71 91       	ld	r23, Z+
 1ac:	77 23       	and	r23, r23
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <strrev+0x4>
 1b0:	32 97       	sbiw	r30, 0x02	; 2
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <strrev+0x18>
 1b4:	7c 91       	ld	r23, X
 1b6:	6d 93       	st	X+, r22
 1b8:	70 83       	st	Z, r23
 1ba:	62 91       	ld	r22, -Z
 1bc:	ae 17       	cp	r26, r30
 1be:	bf 07       	cpc	r27, r31
 1c0:	c8 f3       	brcs	.-14     	; 0x1b4 <strrev+0x10>
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
