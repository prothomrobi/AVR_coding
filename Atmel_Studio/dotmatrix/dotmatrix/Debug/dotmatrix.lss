
dotmatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000606  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056e  00000000  00000000  000007a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000268  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031e  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000012be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
    DDRC = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;
  70:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		PORTD = ~1;
  72:	5e ef       	ldi	r21, 0xFE	; 254
		//PORTC =2;
		int i;
		for(i=0; i<5; i++){
			PORTC |= (1<<i); 
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	70 e0       	ldi	r23, 0x00	; 0
{
    DDRC = 0xff;
	DDRD = 0xff;
    while (1) 
    {
		PORTD = ~1;
  78:	52 bb       	out	0x12, r21	; 18
		//PORTC =2;
		int i;
		for(i=0; i<5; i++){
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
			PORTC |= (1<<i); 
  7e:	45 b3       	in	r20, 0x15	; 21
  80:	cb 01       	movw	r24, r22
  82:	02 2e       	mov	r0, r18
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <main+0x1a>
  8e:	94 2f       	mov	r25, r20
  90:	98 2b       	or	r25, r24
  92:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	4f ef       	ldi	r20, 0xFF	; 255
  96:	e1 ee       	ldi	r30, 0xE1	; 225
  98:	f4 e0       	ldi	r31, 0x04	; 4
  9a:	41 50       	subi	r20, 0x01	; 1
  9c:	e0 40       	sbci	r30, 0x00	; 0
  9e:	f0 40       	sbci	r31, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
			_delay_ms(200);
			PORTC &= ~(1<<i);
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	80 95       	com	r24
  aa:	89 23       	and	r24, r25
  ac:	85 bb       	out	0x15, r24	; 21
    while (1) 
    {
		PORTD = ~1;
		//PORTC =2;
		int i;
		for(i=0; i<5; i++){
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	25 30       	cpi	r18, 0x05	; 5
  b4:	31 05       	cpc	r19, r1
  b6:	19 f7       	brne	.-58     	; 0x7e <main+0x12>
  b8:	df cf       	rjmp	.-66     	; 0x78 <main+0xc>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
