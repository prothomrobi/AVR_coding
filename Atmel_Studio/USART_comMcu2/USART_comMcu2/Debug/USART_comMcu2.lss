
USART_comMcu2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000815  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fe  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  0000111f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_uart>:
}

unsigned uart_receive(void){
	while(!(UCSR0A) & (1<<RXEN0)){};
	return UDR0;
}
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  8e:	80 e2       	ldi	r24, 0x20	; 32
  90:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  9a:	08 95       	ret

0000009c <uart_transmit>:
  9c:	e0 ec       	ldi	r30, 0xC0	; 192
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	90 81       	ld	r25, Z
  a2:	95 ff       	sbrs	r25, 5
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <uart_transmit+0x4>
  a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  aa:	08 95       	ret

000000ac <main>:


int main ()
{
	init_uart(MYUBRR);
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 40 00 	call	0x80	; 0x80 <init_uart>
	
	DDRC  = 0xff;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<< PD7);
  b8:	57 9a       	sbi	0x0a, 7	; 10
	while(!(UCSR0A & (1<<UDRE0))){};
	UDR0 = data;
}

unsigned uart_receive(void){
	while(!(UCSR0A) & (1<<RXEN0)){};
  ba:	0f 2e       	mov	r0, r31
  bc:	f0 ec       	ldi	r31, 0xC0	; 192
  be:	ef 2e       	mov	r14, r31
  c0:	f1 2c       	mov	r15, r1
  c2:	f0 2d       	mov	r31, r0
	return UDR0;
  c4:	06 ec       	ldi	r16, 0xC6	; 198
  c6:	10 e0       	ldi	r17, 0x00	; 0
}


int main ()
{
  c8:	c0 e0       	ldi	r28, 0x00	; 0
	while(!(UCSR0A & (1<<UDRE0))){};
	UDR0 = data;
}

unsigned uart_receive(void){
	while(!(UCSR0A) & (1<<RXEN0)){};
  ca:	f7 01       	movw	r30, r14
  cc:	80 81       	ld	r24, Z
	return UDR0;
  ce:	f8 01       	movw	r30, r16
  d0:	80 81       	ld	r24, Z
	DDRD |= (1<< PD7);
	while(1){
			for (int j=0; j<=100;j++)
			{
				int r_value = uart_receive();
				UDR0 = r_value;
  d2:	80 83       	st	Z, r24
				PORTC = UDR0;
  d4:	80 81       	ld	r24, Z
  d6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	ff ef       	ldi	r31, 0xFF	; 255
  da:	29 e6       	ldi	r18, 0x69	; 105
  dc:	88 e1       	ldi	r24, 0x18	; 24
  de:	f1 50       	subi	r31, 0x01	; 1
  e0:	20 40       	sbci	r18, 0x00	; 0
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x32>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x3c>
  e8:	00 00       	nop
				_delay_ms(500);
				uart_transmit(j);
  ea:	8c 2f       	mov	r24, r28
  ec:	0e 94 4e 00 	call	0x9c	; 0x9c <uart_transmit>
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	e9 e6       	ldi	r30, 0x69	; 105
  f4:	f8 e1       	ldi	r31, 0x18	; 24
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	e0 40       	sbci	r30, 0x00	; 0
  fa:	f0 40       	sbci	r31, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x4a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x54>
 100:	00 00       	nop
 102:	cf 5f       	subi	r28, 0xFF	; 255
	init_uart(MYUBRR);
	
	DDRC  = 0xff;
	DDRD |= (1<< PD7);
	while(1){
			for (int j=0; j<=100;j++)
 104:	c5 36       	cpi	r28, 0x65	; 101
 106:	09 f7       	brne	.-62     	; 0xca <main+0x1e>
 108:	df cf       	rjmp	.-66     	; 0xc8 <main+0x1c>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
