
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  0000068e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a90  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe1  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2b  00000000  00000000  00003269  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092d  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f8  00000000  00000000  000047ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004fa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	06 c1       	rjmp	.+524    	; 0x20e <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
   6:	00 00       	nop
   8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
   a:	00 00       	nop
   c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
   e:	00 00       	nop
  10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
  12:	00 00       	nop
  14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
  16:	00 00       	nop
  18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
  1e:	00 00       	nop
  20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
  22:	00 00       	nop
  24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
  26:	00 00       	nop
  28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
  2e:	00 00       	nop
  30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
  36:	00 00       	nop
  38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
  42:	00 00       	nop
  44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
  46:	00 00       	nop
  48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
  56:	00 00       	nop
  58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0a c1       	rjmp	.+532    	; 0x272 <__vector_23>
  5e:	00 00       	nop
  60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
  62:	00 00       	nop
  64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
  66:	00 00       	nop
  68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
  72:	00 00       	nop
  74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
  76:	00 00       	nop
  78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
  82:	00 00       	nop
  84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
  86:	00 00       	nop
  88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
  92:	00 00       	nop
  94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
  96:	00 00       	nop
  98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
  da:	00 00       	nop
  dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	5d 02       	muls	r21, r29
  e6:	60 02       	muls	r22, r16
  e8:	4f 02       	muls	r20, r31
  ea:	53 02       	muls	r21, r19
  ec:	59 02       	muls	r21, r25
  ee:	97 02       	muls	r25, r23
  f0:	64 02       	muls	r22, r20
  f2:	68 02       	muls	r22, r24
  f4:	6e 02       	muls	r22, r30
  f6:	72 02       	muls	r23, r18
  f8:	76 02       	muls	r23, r22
  fa:	7c 02       	muls	r23, r28
  fc:	80 02       	muls	r24, r16
  fe:	84 02       	muls	r24, r20
 100:	97 02       	muls	r25, r23
 102:	8a 02       	muls	r24, r26
 104:	8e 02       	muls	r24, r30
 106:	92 02       	muls	r25, r18

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_end>:
 20e:	11 24       	eor	r1, r1
 210:	1f be       	out	0x3f, r1	; 63
 212:	cf ef       	ldi	r28, 0xFF	; 255
 214:	d1 e2       	ldi	r29, 0x21	; 33
 216:	de bf       	out	0x3e, r29	; 62
 218:	cd bf       	out	0x3d, r28	; 61
 21a:	00 e0       	ldi	r16, 0x00	; 0
 21c:	0c bf       	out	0x3c, r16	; 60

0000021e <__do_clear_bss>:
 21e:	22 e0       	ldi	r18, 0x02	; 2
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b2 e0       	ldi	r27, 0x02	; 2
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a9 30       	cpi	r26, 0x09	; 9
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	16 d0       	rcall	.+44     	; 0x25c <main>
 230:	f2 c1       	rjmp	.+996    	; 0x616 <_exit>

00000232 <__bad_interrupt>:
 232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <setup>:
*/

// the setup function runs once when you press reset or power the board
void setup() {
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	8d e0       	ldi	r24, 0x0D	; 13
 238:	7b c1       	rjmp	.+758    	; 0x530 <pinMode>

0000023a <loop>:
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	8d e0       	ldi	r24, 0x0D	; 13
 23e:	b4 d1       	rcall	.+872    	; 0x5a8 <digitalWrite>
  delay(1000);                       // wait for a second
 240:	68 ee       	ldi	r22, 0xE8	; 232
 242:	73 e0       	ldi	r23, 0x03	; 3
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	83 d0       	rcall	.+262    	; 0x350 <delay>
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	8d e0       	ldi	r24, 0x0D	; 13
 24e:	ac d1       	rcall	.+856    	; 0x5a8 <digitalWrite>
  delay(1000);                       // wait for a second
 250:	68 ee       	ldi	r22, 0xE8	; 232
 252:	73 e0       	ldi	r23, 0x03	; 3
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	7b c0       	rjmp	.+246    	; 0x350 <delay>

0000025a <initVariant>:
 25a:	08 95       	ret

0000025c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 25c:	b2 d0       	rcall	.+356    	; 0x3c2 <init>

	initVariant();
 25e:	fd df       	rcall	.-6      	; 0x25a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 260:	e9 df       	rcall	.-46     	; 0x234 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 266:	e9 df       	rcall	.-46     	; 0x23a <loop>
 268:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
 26a:	e9 f3       	breq	.-6      	; 0x266 <main+0xa>
 26c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 270:	fa cf       	rjmp	.-12     	; 0x266 <main+0xa>

00000272 <__vector_23>:
 272:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <timer0_millis>
 28c:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <timer0_millis+0x1>
 290:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <timer0_millis+0x2>
 294:	b0 91 04 02 	lds	r27, 0x0204	; 0x800204 <timer0_millis+0x3>
 298:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <_edata>
 29c:	23 e0       	ldi	r18, 0x03	; 3
 29e:	23 0f       	add	r18, r19
 2a0:	2d 37       	cpi	r18, 0x7D	; 125
 2a2:	20 f4       	brcc	.+8      	; 0x2ac <__vector_23+0x3a>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	a1 1d       	adc	r26, r1
 2a8:	b1 1d       	adc	r27, r1
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__vector_23+0x44>
 2ac:	26 e8       	ldi	r18, 0x86	; 134
 2ae:	23 0f       	add	r18, r19
 2b0:	02 96       	adiw	r24, 0x02	; 2
 2b2:	a1 1d       	adc	r26, r1
 2b4:	b1 1d       	adc	r27, r1
 2b6:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <_edata>
 2ba:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <timer0_millis>
 2be:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <timer0_millis+0x1>
 2c2:	a0 93 03 02 	sts	0x0203, r26	; 0x800203 <timer0_millis+0x2>
 2c6:	b0 93 04 02 	sts	0x0204, r27	; 0x800204 <timer0_millis+0x3>
 2ca:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <timer0_overflow_count>
 2ce:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <timer0_overflow_count+0x1>
 2d2:	a0 91 07 02 	lds	r26, 0x0207	; 0x800207 <timer0_overflow_count+0x2>
 2d6:	b0 91 08 02 	lds	r27, 0x0208	; 0x800208 <timer0_overflow_count+0x3>
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	a1 1d       	adc	r26, r1
 2de:	b1 1d       	adc	r27, r1
 2e0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <timer0_overflow_count>
 2e4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <timer0_overflow_count+0x1>
 2e8:	a0 93 07 02 	sts	0x0207, r26	; 0x800207 <timer0_overflow_count+0x2>
 2ec:	b0 93 08 02 	sts	0x0208, r27	; 0x800208 <timer0_overflow_count+0x3>
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <micros>:
 306:	3f b7       	in	r19, 0x3f	; 63
 308:	f8 94       	cli
 30a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <timer0_overflow_count>
 30e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <timer0_overflow_count+0x1>
 312:	a0 91 07 02 	lds	r26, 0x0207	; 0x800207 <timer0_overflow_count+0x2>
 316:	b0 91 08 02 	lds	r27, 0x0208	; 0x800208 <timer0_overflow_count+0x3>
 31a:	26 b5       	in	r18, 0x26	; 38
 31c:	a8 9b       	sbis	0x15, 0	; 21
 31e:	05 c0       	rjmp	.+10     	; 0x32a <micros+0x24>
 320:	2f 3f       	cpi	r18, 0xFF	; 255
 322:	19 f0       	breq	.+6      	; 0x32a <micros+0x24>
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	a1 1d       	adc	r26, r1
 328:	b1 1d       	adc	r27, r1
 32a:	3f bf       	out	0x3f, r19	; 63
 32c:	ba 2f       	mov	r27, r26
 32e:	a9 2f       	mov	r26, r25
 330:	98 2f       	mov	r25, r24
 332:	88 27       	eor	r24, r24
 334:	82 0f       	add	r24, r18
 336:	91 1d       	adc	r25, r1
 338:	a1 1d       	adc	r26, r1
 33a:	b1 1d       	adc	r27, r1
 33c:	bc 01       	movw	r22, r24
 33e:	cd 01       	movw	r24, r26
 340:	42 e0       	ldi	r20, 0x02	; 2
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	88 1f       	adc	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	4a 95       	dec	r20
 34c:	d1 f7       	brne	.-12     	; 0x342 <micros+0x3c>
 34e:	08 95       	ret

00000350 <delay>:
 350:	8f 92       	push	r8
 352:	9f 92       	push	r9
 354:	af 92       	push	r10
 356:	bf 92       	push	r11
 358:	cf 92       	push	r12
 35a:	df 92       	push	r13
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	6b 01       	movw	r12, r22
 362:	7c 01       	movw	r14, r24
 364:	d0 df       	rcall	.-96     	; 0x306 <micros>
 366:	4b 01       	movw	r8, r22
 368:	5c 01       	movw	r10, r24
 36a:	c1 14       	cp	r12, r1
 36c:	d1 04       	cpc	r13, r1
 36e:	e1 04       	cpc	r14, r1
 370:	f1 04       	cpc	r15, r1
 372:	f1 f0       	breq	.+60     	; 0x3b0 <delay+0x60>
 374:	47 d1       	rcall	.+654    	; 0x604 <yield>
 376:	c7 df       	rcall	.-114    	; 0x306 <micros>
 378:	dc 01       	movw	r26, r24
 37a:	cb 01       	movw	r24, r22
 37c:	88 19       	sub	r24, r8
 37e:	99 09       	sbc	r25, r9
 380:	aa 09       	sbc	r26, r10
 382:	bb 09       	sbc	r27, r11
 384:	88 3e       	cpi	r24, 0xE8	; 232
 386:	93 40       	sbci	r25, 0x03	; 3
 388:	a1 05       	cpc	r26, r1
 38a:	b1 05       	cpc	r27, r1
 38c:	70 f3       	brcs	.-36     	; 0x36a <delay+0x1a>
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	c2 1a       	sub	r12, r18
 392:	d1 08       	sbc	r13, r1
 394:	e1 08       	sbc	r14, r1
 396:	f1 08       	sbc	r15, r1
 398:	88 ee       	ldi	r24, 0xE8	; 232
 39a:	88 0e       	add	r8, r24
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	98 1e       	adc	r9, r24
 3a0:	a1 1c       	adc	r10, r1
 3a2:	b1 1c       	adc	r11, r1
 3a4:	c1 14       	cp	r12, r1
 3a6:	d1 04       	cpc	r13, r1
 3a8:	e1 04       	cpc	r14, r1
 3aa:	f1 04       	cpc	r15, r1
 3ac:	21 f7       	brne	.-56     	; 0x376 <delay+0x26>
 3ae:	dd cf       	rjmp	.-70     	; 0x36a <delay+0x1a>
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	df 90       	pop	r13
 3b6:	cf 90       	pop	r12
 3b8:	bf 90       	pop	r11
 3ba:	af 90       	pop	r10
 3bc:	9f 90       	pop	r9
 3be:	8f 90       	pop	r8
 3c0:	08 95       	ret

000003c2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 3c2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 3c4:	84 b5       	in	r24, 0x24	; 36
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3ca:	84 b5       	in	r24, 0x24	; 36
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3d0:	85 b5       	in	r24, 0x25	; 37
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3d6:	85 b5       	in	r24, 0x25	; 37
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3dc:	ee e6       	ldi	r30, 0x6E	; 110
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3e6:	e1 e8       	ldi	r30, 0x81	; 129
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3ec:	80 81       	ld	r24, Z
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3f2:	80 81       	ld	r24, Z
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3f8:	e0 e8       	ldi	r30, 0x80	; 128
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	81 60       	ori	r24, 0x01	; 1
 400:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 402:	e1 eb       	ldi	r30, 0xB1	; 177
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	84 60       	ori	r24, 0x04	; 4
 40a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 40c:	e0 eb       	ldi	r30, 0xB0	; 176
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	81 60       	ori	r24, 0x01	; 1
 414:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 416:	e1 e9       	ldi	r30, 0x91	; 145
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	82 60       	ori	r24, 0x02	; 2
 41e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 420:	80 81       	ld	r24, Z
 422:	81 60       	ori	r24, 0x01	; 1
 424:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 426:	e0 e9       	ldi	r30, 0x90	; 144
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	81 60       	ori	r24, 0x01	; 1
 42e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 430:	e1 ea       	ldi	r30, 0xA1	; 161
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	82 60       	ori	r24, 0x02	; 2
 438:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 43a:	80 81       	ld	r24, Z
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 440:	e0 ea       	ldi	r30, 0xA0	; 160
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	81 60       	ori	r24, 0x01	; 1
 448:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 44a:	e1 e2       	ldi	r30, 0x21	; 33
 44c:	f1 e0       	ldi	r31, 0x01	; 1
 44e:	80 81       	ld	r24, Z
 450:	82 60       	ori	r24, 0x02	; 2
 452:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 454:	80 81       	ld	r24, Z
 456:	81 60       	ori	r24, 0x01	; 1
 458:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 45a:	e0 e2       	ldi	r30, 0x20	; 32
 45c:	f1 e0       	ldi	r31, 0x01	; 1
 45e:	80 81       	ld	r24, Z
 460:	81 60       	ori	r24, 0x01	; 1
 462:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 464:	ea e7       	ldi	r30, 0x7A	; 122
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	84 60       	ori	r24, 0x04	; 4
 46c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 46e:	80 81       	ld	r24, Z
 470:	82 60       	ori	r24, 0x02	; 2
 472:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 474:	80 81       	ld	r24, Z
 476:	81 60       	ori	r24, 0x01	; 1
 478:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 47a:	80 81       	ld	r24, Z
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 480:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 484:	08 95       	ret

00000486 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	e2 31       	cpi	r30, 0x12	; 18
 48e:	f1 05       	cpc	r31, r1
 490:	08 f0       	brcs	.+2      	; 0x494 <turnOffPWM+0xe>
 492:	4d c0       	rjmp	.+154    	; 0x52e <turnOffPWM+0xa8>
 494:	88 27       	eor	r24, r24
 496:	ee 58       	subi	r30, 0x8E	; 142
 498:	ff 4f       	sbci	r31, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	b4 c0       	rjmp	.+360    	; 0x606 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 49e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 4a2:	8f 77       	andi	r24, 0x7F	; 127
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 4aa:	8f 7d       	andi	r24, 0xDF	; 223
 4ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 4b0:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 4b2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 4b6:	87 7f       	andi	r24, 0xF7	; 247
 4b8:	f9 cf       	rjmp	.-14     	; 0x4ac <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4ba:	84 b5       	in	r24, 0x24	; 36
 4bc:	8f 77       	andi	r24, 0x7F	; 127
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4c0:	84 b5       	in	r24, 0x24	; 36
 4c2:	8f 7d       	andi	r24, 0xDF	; 223
 4c4:	84 bd       	out	0x24, r24	; 36
 4c6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 4cc:	8f 77       	andi	r24, 0x7F	; 127
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 4d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 4d4:	8f 7d       	andi	r24, 0xDF	; 223
 4d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 4da:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 4dc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 4e0:	8f 77       	andi	r24, 0x7F	; 127
 4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 4e4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 4e8:	8f 7d       	andi	r24, 0xDF	; 223
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 4ec:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 4f0:	87 7f       	andi	r24, 0xF7	; 247
 4f2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 4f6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 4f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 4fc:	8f 77       	andi	r24, 0x7F	; 127
 4fe:	07 c0       	rjmp	.+14     	; 0x50e <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 500:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 504:	8f 7d       	andi	r24, 0xDF	; 223
 506:	03 c0       	rjmp	.+6      	; 0x50e <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 508:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 50c:	87 7f       	andi	r24, 0xF7	; 247
 50e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
 512:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 514:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 518:	8f 77       	andi	r24, 0x7F	; 127
 51a:	07 c0       	rjmp	.+14     	; 0x52a <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 51c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 520:	8f 7d       	andi	r24, 0xDF	; 223
 522:	03 c0       	rjmp	.+6      	; 0x52a <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 524:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 528:	87 7f       	andi	r24, 0xF7	; 247
 52a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 52e:	08 95       	ret

00000530 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	fc 01       	movw	r30, r24
 538:	e2 5b       	subi	r30, 0xB2	; 178
 53a:	fe 4f       	sbci	r31, 0xFE	; 254
 53c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 53e:	fc 01       	movw	r30, r24
 540:	ec 56       	subi	r30, 0x6C	; 108
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 546:	88 23       	and	r24, r24
 548:	61 f1       	breq	.+88     	; 0x5a2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	fc 01       	movw	r30, r24
 552:	ec 50       	subi	r30, 0x0C	; 12
 554:	fe 4f       	sbci	r31, 0xFE	; 254
 556:	c5 91       	lpm	r28, Z+
 558:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 55a:	fc 01       	movw	r30, r24
 55c:	e6 52       	subi	r30, 0x26	; 38
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	a5 91       	lpm	r26, Z+
 562:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 564:	61 11       	cpse	r22, r1
 566:	09 c0       	rjmp	.+18     	; 0x57a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 568:	9f b7       	in	r25, 0x3f	; 63
                cli();
 56a:	f8 94       	cli
		*reg &= ~bit;
 56c:	88 81       	ld	r24, Y
 56e:	20 95       	com	r18
 570:	82 23       	and	r24, r18
 572:	88 83       	st	Y, r24
		*out &= ~bit;
 574:	ec 91       	ld	r30, X
 576:	2e 23       	and	r18, r30
 578:	0b c0       	rjmp	.+22     	; 0x590 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 57a:	62 30       	cpi	r22, 0x02	; 2
 57c:	61 f4       	brne	.+24     	; 0x596 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 57e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 580:	f8 94       	cli
		*reg &= ~bit;
 582:	88 81       	ld	r24, Y
 584:	32 2f       	mov	r19, r18
 586:	30 95       	com	r19
 588:	83 23       	and	r24, r19
 58a:	88 83       	st	Y, r24
		*out |= bit;
 58c:	ec 91       	ld	r30, X
 58e:	2e 2b       	or	r18, r30
 590:	2c 93       	st	X, r18
		SREG = oldSREG;
 592:	9f bf       	out	0x3f, r25	; 63
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 596:	8f b7       	in	r24, 0x3f	; 63
                cli();
 598:	f8 94       	cli
		*reg |= bit;
 59a:	e8 81       	ld	r30, Y
 59c:	2e 2b       	or	r18, r30
 59e:	28 83       	st	Y, r18
		SREG = oldSREG;
 5a0:	8f bf       	out	0x3f, r24	; 63
	}
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 5ae:	28 2f       	mov	r18, r24
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	f9 01       	movw	r30, r18
 5b4:	e8 5f       	subi	r30, 0xF8	; 248
 5b6:	fe 4f       	sbci	r31, 0xFE	; 254
 5b8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 5ba:	f9 01       	movw	r30, r18
 5bc:	e2 5b       	subi	r30, 0xB2	; 178
 5be:	fe 4f       	sbci	r31, 0xFE	; 254
 5c0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5c2:	f9 01       	movw	r30, r18
 5c4:	ec 56       	subi	r30, 0x6C	; 108
 5c6:	fe 4f       	sbci	r31, 0xFE	; 254
 5c8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5ca:	cc 23       	and	r28, r28
 5cc:	b9 f0       	breq	.+46     	; 0x5fc <digitalWrite+0x54>
 5ce:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5d0:	81 11       	cpse	r24, r1
 5d2:	59 df       	rcall	.-334    	; 0x486 <turnOffPWM>

	out = portOutputRegister(port);
 5d4:	ec 2f       	mov	r30, r28
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	ee 0f       	add	r30, r30
 5da:	ff 1f       	adc	r31, r31
 5dc:	e6 52       	subi	r30, 0x26	; 38
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	a5 91       	lpm	r26, Z+
 5e2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5e4:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5e6:	f8 94       	cli

	if (val == LOW) {
 5e8:	11 11       	cpse	r17, r1
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <digitalWrite+0x4c>
		*out &= ~bit;
 5ec:	8c 91       	ld	r24, X
 5ee:	d0 95       	com	r29
 5f0:	d8 23       	and	r29, r24
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <digitalWrite+0x50>
	} else {
		*out |= bit;
 5f4:	ec 91       	ld	r30, X
 5f6:	de 2b       	or	r29, r30
 5f8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 5fa:	9f bf       	out	0x3f, r25	; 63
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	08 95       	ret

00000604 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 604:	08 95       	ret

00000606 <__tablejump2__>:
 606:	ee 0f       	add	r30, r30
 608:	ff 1f       	adc	r31, r31
 60a:	88 1f       	adc	r24, r24
 60c:	8b bf       	out	0x3b, r24	; 59
 60e:	07 90       	elpm	r0, Z+
 610:	f6 91       	elpm	r31, Z
 612:	e0 2d       	mov	r30, r0
 614:	19 94       	eijmp

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
