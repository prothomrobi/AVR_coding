
serialCom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bf  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ba  00000000  00000000  00000b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010a  00000000  00000000  00001a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_uart>:

}

void uart_transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0))){};
	UDR0 = data;
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  8e:	80 e2       	ldi	r24, 0x20	; 32
  90:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  9a:	08 95       	ret

0000009c <uart_receive>:
}

unsigned uart_receive(void){
	while(!(UCSR0A) & (1<<RXEN0)){};
  9c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	PORTC = UDR0;
  a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a4:	88 b9       	out	0x08, r24	; 8
}
  a6:	08 95       	ret

000000a8 <main>:


int main ()
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	64 97       	sbiw	r28, 0x14	; 20
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
	init_uart(MYUBRR);
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 40 00 	call	0x80	; 0x80 <init_uart>
	int value = uart_receive();
  c4:	0e 94 4e 00 	call	0x9c	; 0x9c <uart_receive>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  c8:	4a e0       	ldi	r20, 0x0A	; 10
  ca:	be 01       	movw	r22, r28
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	0e 94 8a 00 	call	0x114	; 0x114 <__itoa_ncheck>
  d4:	fe 01       	movw	r30, r28
  d6:	31 96       	adiw	r30, 0x01	; 1
  d8:	9e 01       	movw	r18, r28
  da:	2b 5e       	subi	r18, 0xEB	; 235
  dc:	3f 4f       	sbci	r19, 0xFF	; 255

	for (int j=0; j<20;j++)
	{
		//printf(buffer);
		PORTD ^= (1<< PD7);
		UDR0 = buffer[j];
  de:	a6 ec       	ldi	r26, 0xC6	; 198
  e0:	b0 e0       	ldi	r27, 0x00	; 0
	itoa (value,buffer,10);

	for (int j=0; j<20;j++)
	{
		//printf(buffer);
		PORTD ^= (1<< PD7);
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	80 58       	subi	r24, 0x80	; 128
  e6:	8b b9       	out	0x0b, r24	; 11
		UDR0 = buffer[j];
  e8:	81 91       	ld	r24, Z+
  ea:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	9e e4       	ldi	r25, 0x4E	; 78
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x48>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x4e>
  f6:	00 00       	nop
	init_uart(MYUBRR);
	int value = uart_receive();
	char buffer [20];
	itoa (value,buffer,10);

	for (int j=0; j<20;j++)
  f8:	e2 17       	cp	r30, r18
  fa:	f3 07       	cpc	r31, r19
  fc:	91 f7       	brne	.-28     	; 0xe2 <main+0x3a>
		PORTD ^= (1<< PD7);
		UDR0 = buffer[j];
		_delay_ms(5);
	}
	//uart_transmit(value);
}
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	64 96       	adiw	r28, 0x14	; 20
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <__itoa_ncheck>:
 114:	bb 27       	eor	r27, r27
 116:	4a 30       	cpi	r20, 0x0A	; 10
 118:	31 f4       	brne	.+12     	; 0x126 <__itoa_ncheck+0x12>
 11a:	99 23       	and	r25, r25
 11c:	22 f4       	brpl	.+8      	; 0x126 <__itoa_ncheck+0x12>
 11e:	bd e2       	ldi	r27, 0x2D	; 45
 120:	90 95       	com	r25
 122:	81 95       	neg	r24
 124:	9f 4f       	sbci	r25, 0xFF	; 255
 126:	0c 94 96 00 	jmp	0x12c	; 0x12c <__utoa_common>

0000012a <__utoa_ncheck>:
 12a:	bb 27       	eor	r27, r27

0000012c <__utoa_common>:
 12c:	fb 01       	movw	r30, r22
 12e:	55 27       	eor	r21, r21
 130:	aa 27       	eor	r26, r26
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	aa 1f       	adc	r26, r26
 138:	a4 17       	cp	r26, r20
 13a:	10 f0       	brcs	.+4      	; 0x140 <__utoa_common+0x14>
 13c:	a4 1b       	sub	r26, r20
 13e:	83 95       	inc	r24
 140:	50 51       	subi	r21, 0x10	; 16
 142:	b9 f7       	brne	.-18     	; 0x132 <__utoa_common+0x6>
 144:	a0 5d       	subi	r26, 0xD0	; 208
 146:	aa 33       	cpi	r26, 0x3A	; 58
 148:	08 f0       	brcs	.+2      	; 0x14c <__utoa_common+0x20>
 14a:	a9 5d       	subi	r26, 0xD9	; 217
 14c:	a1 93       	st	Z+, r26
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	79 f7       	brne	.-34     	; 0x130 <__utoa_common+0x4>
 152:	b1 11       	cpse	r27, r1
 154:	b1 93       	st	Z+, r27
 156:	11 92       	st	Z+, r1
 158:	cb 01       	movw	r24, r22
 15a:	0c 94 af 00 	jmp	0x15e	; 0x15e <strrev>

0000015e <strrev>:
 15e:	dc 01       	movw	r26, r24
 160:	fc 01       	movw	r30, r24
 162:	67 2f       	mov	r22, r23
 164:	71 91       	ld	r23, Z+
 166:	77 23       	and	r23, r23
 168:	e1 f7       	brne	.-8      	; 0x162 <strrev+0x4>
 16a:	32 97       	sbiw	r30, 0x02	; 2
 16c:	04 c0       	rjmp	.+8      	; 0x176 <strrev+0x18>
 16e:	7c 91       	ld	r23, X
 170:	6d 93       	st	X+, r22
 172:	70 83       	st	Z, r23
 174:	62 91       	ld	r22, -Z
 176:	ae 17       	cp	r26, r30
 178:	bf 07       	cpc	r27, r31
 17a:	c8 f3       	brcs	.-14     	; 0x16e <strrev+0x10>
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
