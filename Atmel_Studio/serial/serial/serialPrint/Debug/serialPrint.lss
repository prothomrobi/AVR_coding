
serialPrint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  00000a18  00000aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080021a  0080021a  00000ac6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000af8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007afc  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bd5  00000000  00000000  000088a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000160a  00000000  00000000  0000a479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  0000ba84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020b0  00000000  00000000  0000c190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000255c  00000000  00000000  0000e240  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0001079c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a6 c3       	rjmp	.+1868   	; 0x7aa <__vector_23>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	29 c2       	rjmp	.+1106   	; 0x4b8 <__vector_25>
  66:	00 00       	nop
  68:	5d c2       	rjmp	.+1210   	; 0x524 <__vector_26>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	c4 02       	muls	r28, r20

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	e8 e1       	ldi	r30, 0x18	; 24
  fe:	fa e0       	ldi	r31, 0x0A	; 10
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	aa 31       	cpi	r26, 0x1A	; 26
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	aa e1       	ldi	r26, 0x1A	; 26
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a0 3c       	cpi	r26, 0xC0	; 192
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	68 d4       	rcall	.+2256   	; 0xa04 <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	52 d2       	rcall	.+1188   	; 0x5e4 <main>
 140:	69 c4       	rjmp	.+2258   	; 0xa14 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 144:	26 e0       	ldi	r18, 0x06	; 6
 146:	40 e8       	ldi	r20, 0x80	; 128
 148:	55 e2       	ldi	r21, 0x25	; 37
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	8a e1       	ldi	r24, 0x1A	; 26
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	4f d1       	rcall	.+670    	; 0x3f2 <_ZN14HardwareSerial5beginEmh>
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
  Serial.begin(9600);
  Serial.print("Hello\n");
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	72 e0       	ldi	r23, 0x02	; 2
 158:	8a e1       	ldi	r24, 0x1A	; 26
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	8c d2       	rcall	.+1304   	; 0x676 <_ZN5Print5printEPKc>
  delay(1000);
 15e:	68 ee       	ldi	r22, 0xE8	; 232
 160:	73 e0       	ldi	r23, 0x03	; 3
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	90 c3       	rjmp	.+1824   	; 0x888 <delay>

00000168 <loop>:
}

void loop() {
  // put your main code here, to run repeatedly:
  int i=23;
  Serial.print(i);
 168:	4a e0       	ldi	r20, 0x0A	; 10
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	67 e1       	ldi	r22, 0x17	; 23
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	8a e1       	ldi	r24, 0x1A	; 26
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	14 d3       	rcall	.+1576   	; 0x79e <_ZN5Print5printEii>
  Serial.print("\n");
 176:	65 e0       	ldi	r22, 0x05	; 5
 178:	72 e0       	ldi	r23, 0x02	; 2
 17a:	8a e1       	ldi	r24, 0x1A	; 26
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	7b d2       	rcall	.+1270   	; 0x676 <_ZN5Print5printEPKc>
  delay(1000);
 180:	68 ee       	ldi	r22, 0xE8	; 232
 182:	73 e0       	ldi	r23, 0x03	; 3
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	7f d3       	rcall	.+1790   	; 0x888 <delay>
  Serial.print(i, OCT);
 18a:	48 e0       	ldi	r20, 0x08	; 8
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	67 e1       	ldi	r22, 0x17	; 23
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	8a e1       	ldi	r24, 0x1A	; 26
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	03 d3       	rcall	.+1542   	; 0x79e <_ZN5Print5printEii>
  Serial.print("\n");
 198:	65 e0       	ldi	r22, 0x05	; 5
 19a:	72 e0       	ldi	r23, 0x02	; 2
 19c:	8a e1       	ldi	r24, 0x1A	; 26
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	6a d2       	rcall	.+1236   	; 0x676 <_ZN5Print5printEPKc>
  delay(1000);
 1a2:	68 ee       	ldi	r22, 0xE8	; 232
 1a4:	73 e0       	ldi	r23, 0x03	; 3
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	6e d3       	rcall	.+1756   	; 0x888 <delay>
 1ac:	40 e1       	ldi	r20, 0x10	; 16
  Serial.print(i, HEX);
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	67 e1       	ldi	r22, 0x17	; 23
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	8a e1       	ldi	r24, 0x1A	; 26
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	f2 d2       	rcall	.+1508   	; 0x79e <_ZN5Print5printEii>
  Serial.print("\n");
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	72 e0       	ldi	r23, 0x02	; 2
 1be:	8a e1       	ldi	r24, 0x1A	; 26
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	59 d2       	rcall	.+1202   	; 0x676 <_ZN5Print5printEPKc>
  delay(1000);
 1c4:	68 ee       	ldi	r22, 0xE8	; 232
 1c6:	73 e0       	ldi	r23, 0x03	; 3
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	5d d3       	rcall	.+1722   	; 0x888 <delay>
  Serial.print(i, BIN);
 1ce:	42 e0       	ldi	r20, 0x02	; 2
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	67 e1       	ldi	r22, 0x17	; 23
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	8a e1       	ldi	r24, 0x1A	; 26
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	e1 d2       	rcall	.+1474   	; 0x79e <_ZN5Print5printEii>
  Serial.print("\n");
 1dc:	65 e0       	ldi	r22, 0x05	; 5
 1de:	72 e0       	ldi	r23, 0x02	; 2
 1e0:	8a e1       	ldi	r24, 0x1A	; 26
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	48 d2       	rcall	.+1168   	; 0x676 <_ZN5Print5printEPKc>
 1e6:	68 ee       	ldi	r22, 0xE8	; 232
  delay(1000);
 1e8:	73 e0       	ldi	r23, 0x03	; 3
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	4c c3       	rjmp	.+1688   	; 0x888 <delay>

000001f0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 1f0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 1f2:	91 8d       	ldd	r25, Z+25	; 0x19
 1f4:	22 8d       	ldd	r18, Z+26	; 0x1a
 1f6:	89 2f       	mov	r24, r25
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	80 5c       	subi	r24, 0xC0	; 192
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	82 1b       	sub	r24, r18
 200:	91 09       	sbc	r25, r1
}
 202:	8f 73       	andi	r24, 0x3F	; 63
 204:	99 27       	eor	r25, r25
 206:	08 95       	ret

00000208 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 208:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 20a:	91 8d       	ldd	r25, Z+25	; 0x19
 20c:	82 8d       	ldd	r24, Z+26	; 0x1a
 20e:	98 17       	cp	r25, r24
 210:	31 f0       	breq	.+12     	; 0x21e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 212:	82 8d       	ldd	r24, Z+26	; 0x1a
 214:	e8 0f       	add	r30, r24
 216:	f1 1d       	adc	r31, r1
 218:	85 8d       	ldd	r24, Z+29	; 0x1d
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 222:	08 95       	ret

00000224 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 224:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 226:	91 8d       	ldd	r25, Z+25	; 0x19
 228:	82 8d       	ldd	r24, Z+26	; 0x1a
 22a:	98 17       	cp	r25, r24
 22c:	61 f0       	breq	.+24     	; 0x246 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 22e:	82 8d       	ldd	r24, Z+26	; 0x1a
 230:	df 01       	movw	r26, r30
 232:	a8 0f       	add	r26, r24
 234:	b1 1d       	adc	r27, r1
 236:	5d 96       	adiw	r26, 0x1d	; 29
 238:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 23a:	92 8d       	ldd	r25, Z+26	; 0x1a
 23c:	9f 5f       	subi	r25, 0xFF	; 255
 23e:	9f 73       	andi	r25, 0x3F	; 63
 240:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 24a:	08 95       	ret

0000024c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 24c:	fc 01       	movw	r30, r24
 24e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 250:	44 8d       	ldd	r20, Z+28	; 0x1c
 252:	25 2f       	mov	r18, r21
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	84 2f       	mov	r24, r20
 258:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 25a:	82 1b       	sub	r24, r18
 25c:	93 0b       	sbc	r25, r19
 25e:	54 17       	cp	r21, r20
 260:	10 f0       	brcs	.+4      	; 0x266 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 262:	cf 96       	adiw	r24, 0x3f	; 63
 264:	08 95       	ret
  return tail - head - 1;
 266:	01 97       	sbiw	r24, 0x01	; 1
}
 268:	08 95       	ret

0000026a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 26a:	8b eb       	ldi	r24, 0xBB	; 187
 26c:	92 e0       	ldi	r25, 0x02	; 2
 26e:	89 2b       	or	r24, r25
 270:	39 f0       	breq	.+14     	; 0x280 <_Z14serialEventRunv+0x16>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	89 2b       	or	r24, r25
 278:	19 f0       	breq	.+6      	; 0x280 <_Z14serialEventRunv+0x16>
 27a:	7d d1       	rcall	.+762    	; 0x576 <_Z17Serial0_availablev>
 27c:	81 11       	cpse	r24, r1
 27e:	25 c0       	rjmp	.+74     	; 0x2ca <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	89 2b       	or	r24, r25
 286:	41 f0       	breq	.+16     	; 0x298 <_Z14serialEventRunv+0x2e>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	89 2b       	or	r24, r25
 28e:	21 f0       	breq	.+8      	; 0x298 <_Z14serialEventRunv+0x2e>
 290:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 294:	81 11       	cpse	r24, r1
 296:	1c c0       	rjmp	.+56     	; 0x2d0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	89 2b       	or	r24, r25
 29e:	41 f0       	breq	.+16     	; 0x2b0 <_Z14serialEventRunv+0x46>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	89 2b       	or	r24, r25
 2a6:	21 f0       	breq	.+8      	; 0x2b0 <_Z14serialEventRunv+0x46>
 2a8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2ac:	81 11       	cpse	r24, r1
 2ae:	13 c0       	rjmp	.+38     	; 0x2d6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	89 2b       	or	r24, r25
 2b6:	a1 f0       	breq	.+40     	; 0x2e0 <_Z14serialEventRunv+0x76>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	89 2b       	or	r24, r25
 2be:	81 f0       	breq	.+32     	; 0x2e0 <_Z14serialEventRunv+0x76>
 2c0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2c4:	81 11       	cpse	r24, r1
 2c6:	0a c0       	rjmp	.+20     	; 0x2dc <_Z14serialEventRunv+0x72>
 2c8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 2ca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2ce:	d8 cf       	rjmp	.-80     	; 0x280 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 2d0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2d4:	e1 cf       	rjmp	.-62     	; 0x298 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 2d6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2da:	ea cf       	rjmp	.-44     	; 0x2b0 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 2dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 2e0:	08 95       	ret

000002e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 2e2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 2e4:	84 8d       	ldd	r24, Z+28	; 0x1c
 2e6:	df 01       	movw	r26, r30
 2e8:	a8 0f       	add	r26, r24
 2ea:	b1 1d       	adc	r27, r1
 2ec:	a3 5a       	subi	r26, 0xA3	; 163
 2ee:	bf 4f       	sbci	r27, 0xFF	; 255
 2f0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 2f2:	84 8d       	ldd	r24, Z+28	; 0x1c
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	8f 73       	andi	r24, 0x3F	; 63
 2fa:	99 27       	eor	r25, r25
 2fc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 2fe:	a6 89       	ldd	r26, Z+22	; 0x16
 300:	b7 89       	ldd	r27, Z+23	; 0x17
 302:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 304:	a0 89       	ldd	r26, Z+16	; 0x10
 306:	b1 89       	ldd	r27, Z+17	; 0x11
 308:	8c 91       	ld	r24, X
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 30e:	93 8d       	ldd	r25, Z+27	; 0x1b
 310:	84 8d       	ldd	r24, Z+28	; 0x1c
 312:	98 13       	cpse	r25, r24
 314:	06 c0       	rjmp	.+12     	; 0x322 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 316:	02 88       	ldd	r0, Z+18	; 0x12
 318:	f3 89       	ldd	r31, Z+19	; 0x13
 31a:	e0 2d       	mov	r30, r0
 31c:	80 81       	ld	r24, Z
 31e:	8f 7d       	andi	r24, 0xDF	; 223
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
  _written = true;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 336:	9b 8d       	ldd	r25, Y+27	; 0x1b
 338:	8c 8d       	ldd	r24, Y+28	; 0x1c
 33a:	98 13       	cpse	r25, r24
 33c:	05 c0       	rjmp	.+10     	; 0x348 <_ZN14HardwareSerial5writeEh+0x24>
 33e:	e8 89       	ldd	r30, Y+16	; 0x10
 340:	f9 89       	ldd	r31, Y+17	; 0x11
 342:	80 81       	ld	r24, Z
 344:	85 fd       	sbrc	r24, 5
 346:	23 c0       	rjmp	.+70     	; 0x38e <_ZN14HardwareSerial5writeEh+0x6a>
 348:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 34a:	0b 8d       	ldd	r16, Y+27	; 0x1b
 34c:	10 e0       	ldi	r17, 0x00	; 0
 34e:	0f 5f       	subi	r16, 0xFF	; 255
 350:	1f 4f       	sbci	r17, 0xFF	; 255
 352:	0f 73       	andi	r16, 0x3F	; 63
 354:	11 27       	eor	r17, r17
 356:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 358:	8c 8d       	ldd	r24, Y+28	; 0x1c
 35a:	e8 12       	cpse	r14, r24
 35c:	0b c0       	rjmp	.+22     	; 0x374 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	07 fc       	sbrc	r0, 7
 362:	fa cf       	rjmp	.-12     	; 0x358 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 364:	e8 89       	ldd	r30, Y+16	; 0x10
 366:	f9 89       	ldd	r31, Y+17	; 0x11
 368:	80 81       	ld	r24, Z
 36a:	85 ff       	sbrs	r24, 5
 36c:	f5 cf       	rjmp	.-22     	; 0x358 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 36e:	ce 01       	movw	r24, r28
 370:	b8 df       	rcall	.-144    	; 0x2e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 372:	f2 cf       	rjmp	.-28     	; 0x358 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 374:	8b 8d       	ldd	r24, Y+27	; 0x1b
 376:	fe 01       	movw	r30, r28
 378:	e8 0f       	add	r30, r24
 37a:	f1 1d       	adc	r31, r1
 37c:	e3 5a       	subi	r30, 0xA3	; 163
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 382:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 384:	ea 89       	ldd	r30, Y+18	; 0x12
 386:	fb 89       	ldd	r31, Y+19	; 0x13
 388:	80 81       	ld	r24, Z
 38a:	80 62       	ori	r24, 0x20	; 32
 38c:	07 c0       	rjmp	.+14     	; 0x39c <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 38e:	ee 89       	ldd	r30, Y+22	; 0x16
 390:	ff 89       	ldd	r31, Y+23	; 0x17
 392:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 394:	e8 89       	ldd	r30, Y+16	; 0x10
 396:	f9 89       	ldd	r31, Y+17	; 0x11
 398:	80 81       	ld	r24, Z
 39a:	80 64       	ori	r24, 0x40	; 64
 39c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	08 95       	ret

000003b0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 3b6:	88 8d       	ldd	r24, Y+24	; 0x18
 3b8:	88 23       	and	r24, r24
 3ba:	c1 f0       	breq	.+48     	; 0x3ec <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 3bc:	ea 89       	ldd	r30, Y+18	; 0x12
 3be:	fb 89       	ldd	r31, Y+19	; 0x13
 3c0:	80 81       	ld	r24, Z
 3c2:	85 fd       	sbrc	r24, 5
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <_ZN14HardwareSerial5flushEv+0x20>
 3c6:	a8 89       	ldd	r26, Y+16	; 0x10
 3c8:	b9 89       	ldd	r27, Y+17	; 0x11
 3ca:	8c 91       	ld	r24, X
 3cc:	86 fd       	sbrc	r24, 6
 3ce:	0e c0       	rjmp	.+28     	; 0x3ec <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	07 fc       	sbrc	r0, 7
 3d4:	f5 cf       	rjmp	.-22     	; 0x3c0 <_ZN14HardwareSerial5flushEv+0x10>
 3d6:	80 81       	ld	r24, Z
 3d8:	85 ff       	sbrs	r24, 5
 3da:	f2 cf       	rjmp	.-28     	; 0x3c0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 3dc:	a8 89       	ldd	r26, Y+16	; 0x10
 3de:	b9 89       	ldd	r27, Y+17	; 0x11
 3e0:	8c 91       	ld	r24, X
 3e2:	85 ff       	sbrs	r24, 5
 3e4:	ed cf       	rjmp	.-38     	; 0x3c0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 3e6:	ce 01       	movw	r24, r28
 3e8:	7c df       	rcall	.-264    	; 0x2e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3ea:	e8 cf       	rjmp	.-48     	; 0x3bc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 3f2:	cf 92       	push	r12
 3f4:	df 92       	push	r13
 3f6:	ef 92       	push	r14
 3f8:	ff 92       	push	r15
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ec 01       	movw	r28, r24
 402:	6a 01       	movw	r12, r20
 404:	7b 01       	movw	r14, r22
 406:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 408:	e8 89       	ldd	r30, Y+16	; 0x10
 40a:	f9 89       	ldd	r31, Y+17	; 0x11
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 410:	41 15       	cp	r20, r1
 412:	51 4e       	sbci	r21, 0xE1	; 225
 414:	61 05       	cpc	r22, r1
 416:	71 05       	cpc	r23, r1
 418:	a9 f0       	breq	.+42     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	79 e0       	ldi	r23, 0x09	; 9
 41e:	8d e3       	ldi	r24, 0x3D	; 61
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	a7 01       	movw	r20, r14
 424:	96 01       	movw	r18, r12
 426:	cc d2       	rcall	.+1432   	; 0x9c0 <__udivmodsi4>
 428:	da 01       	movw	r26, r20
 42a:	c9 01       	movw	r24, r18
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	a1 09       	sbc	r26, r1
 430:	b1 09       	sbc	r27, r1
 432:	b6 95       	lsr	r27
 434:	a7 95       	ror	r26
 436:	97 95       	ror	r25
 438:	87 95       	ror	r24
 43a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 43c:	21 15       	cp	r18, r1
 43e:	80 e1       	ldi	r24, 0x10	; 16
 440:	38 07       	cpc	r19, r24
 442:	a0 f0       	brcs	.+40     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
  {
    *_ucsra = 0;
 444:	e8 89       	ldd	r30, Y+16	; 0x10
 446:	f9 89       	ldd	r31, Y+17	; 0x11
 448:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 44a:	60 e8       	ldi	r22, 0x80	; 128
 44c:	74 e8       	ldi	r23, 0x84	; 132
 44e:	8e e1       	ldi	r24, 0x1E	; 30
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	a7 01       	movw	r20, r14
 454:	96 01       	movw	r18, r12
 456:	b4 d2       	rcall	.+1384   	; 0x9c0 <__udivmodsi4>
 458:	da 01       	movw	r26, r20
 45a:	c9 01       	movw	r24, r18
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	a1 09       	sbc	r26, r1
 460:	b1 09       	sbc	r27, r1
 462:	b6 95       	lsr	r27
 464:	a7 95       	ror	r26
 466:	97 95       	ror	r25
 468:	87 95       	ror	r24
 46a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 46c:	ec 85       	ldd	r30, Y+12	; 0x0c
 46e:	fd 85       	ldd	r31, Y+13	; 0x0d
 470:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 472:	ee 85       	ldd	r30, Y+14	; 0x0e
 474:	ff 85       	ldd	r31, Y+15	; 0x0f
 476:	20 83       	st	Z, r18

  _written = false;
 478:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 47a:	ec 89       	ldd	r30, Y+20	; 0x14
 47c:	fd 89       	ldd	r31, Y+21	; 0x15
 47e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 480:	ea 89       	ldd	r30, Y+18	; 0x12
 482:	fb 89       	ldd	r31, Y+19	; 0x13
 484:	80 81       	ld	r24, Z
 486:	80 61       	ori	r24, 0x10	; 16
 488:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 48a:	ea 89       	ldd	r30, Y+18	; 0x12
 48c:	fb 89       	ldd	r31, Y+19	; 0x13
 48e:	80 81       	ld	r24, Z
 490:	88 60       	ori	r24, 0x08	; 8
 492:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 494:	ea 89       	ldd	r30, Y+18	; 0x12
 496:	fb 89       	ldd	r31, Y+19	; 0x13
 498:	80 81       	ld	r24, Z
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 49e:	ea 89       	ldd	r30, Y+18	; 0x12
 4a0:	fb 89       	ldd	r31, Y+19	; 0x13
 4a2:	80 81       	ld	r24, Z
 4a4:	8f 7d       	andi	r24, 0xDF	; 223
 4a6:	80 83       	st	Z, r24
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	08 95       	ret

000004b8 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	0b b6       	in	r0, 0x3b	; 59
 4c4:	0f 92       	push	r0
 4c6:	2f 93       	push	r18
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 4d0:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <__data_end+0x10>
 4d4:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <__data_end+0x11>
 4d8:	80 81       	ld	r24, Z
 4da:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <__data_end+0x16>
 4de:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <__data_end+0x17>
 4e2:	82 fd       	sbrc	r24, 2
 4e4:	12 c0       	rjmp	.+36     	; 0x50a <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 4e6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 4e8:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <__data_end+0x19>
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 4f0:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end+0x1a>
 4f4:	82 17       	cp	r24, r18
 4f6:	51 f0       	breq	.+20     	; 0x50c <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 4f8:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <__data_end+0x19>
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	e6 5e       	subi	r30, 0xE6	; 230
 500:	fd 4f       	sbci	r31, 0xFD	; 253
 502:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 504:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <__data_end+0x19>
 508:	01 c0       	rjmp	.+2      	; 0x50c <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 50a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	0b b6       	in	r0, 0x3b	; 59
 530:	0f 92       	push	r0
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 54a:	8a e1       	ldi	r24, 0x1A	; 26
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	c9 de       	rcall	.-622    	; 0x2e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0b be       	out	0x3b, r0	; 59
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 576:	8a e1       	ldi	r24, 0x1A	; 26
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	3a de       	rcall	.-908    	; 0x1f0 <_ZN14HardwareSerial9availableEv>
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	89 2b       	or	r24, r25
 580:	09 f4       	brne	.+2      	; 0x584 <_Z17Serial0_availablev+0xe>
 582:	20 e0       	ldi	r18, 0x00	; 0
}
 584:	82 2f       	mov	r24, r18
 586:	08 95       	ret

00000588 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 588:	ea e1       	ldi	r30, 0x1A	; 26
 58a:	f2 e0       	ldi	r31, 0x02	; 2
 58c:	13 82       	std	Z+3, r1	; 0x03
 58e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 590:	88 ee       	ldi	r24, 0xE8	; 232
 592:	93 e0       	ldi	r25, 0x03	; 3
 594:	a0 e0       	ldi	r26, 0x00	; 0
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	84 83       	std	Z+4, r24	; 0x04
 59a:	95 83       	std	Z+5, r25	; 0x05
 59c:	a6 83       	std	Z+6, r26	; 0x06
 59e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 5a0:	8b e0       	ldi	r24, 0x0B	; 11
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	91 83       	std	Z+1, r25	; 0x01
 5a6:	80 83       	st	Z, r24
 5a8:	85 ec       	ldi	r24, 0xC5	; 197
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	95 87       	std	Z+13, r25	; 0x0d
 5ae:	84 87       	std	Z+12, r24	; 0x0c
 5b0:	84 ec       	ldi	r24, 0xC4	; 196
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	97 87       	std	Z+15, r25	; 0x0f
 5b6:	86 87       	std	Z+14, r24	; 0x0e
 5b8:	80 ec       	ldi	r24, 0xC0	; 192
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	91 8b       	std	Z+17, r25	; 0x11
 5be:	80 8b       	std	Z+16, r24	; 0x10
 5c0:	81 ec       	ldi	r24, 0xC1	; 193
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	93 8b       	std	Z+19, r25	; 0x13
 5c6:	82 8b       	std	Z+18, r24	; 0x12
 5c8:	82 ec       	ldi	r24, 0xC2	; 194
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	95 8b       	std	Z+21, r25	; 0x15
 5ce:	84 8b       	std	Z+20, r24	; 0x14
 5d0:	86 ec       	ldi	r24, 0xC6	; 198
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	97 8b       	std	Z+23, r25	; 0x17
 5d6:	86 8b       	std	Z+22, r24	; 0x16
 5d8:	11 8e       	std	Z+25, r1	; 0x19
 5da:	12 8e       	std	Z+26, r1	; 0x1a
 5dc:	13 8e       	std	Z+27, r1	; 0x1b
 5de:	14 8e       	std	Z+28, r1	; 0x1c
 5e0:	08 95       	ret

000005e2 <initVariant>:
 5e2:	08 95       	ret

000005e4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 5e4:	8a d1       	rcall	.+788    	; 0x8fa <init>

	initVariant();
 5e6:	fd df       	rcall	.-6      	; 0x5e2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 5e8:	ad dd       	rcall	.-1190   	; 0x144 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 5ea:	c5 e3       	ldi	r28, 0x35	; 53
 5ec:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 5ee:	bc dd       	rcall	.-1160   	; 0x168 <loop>
		if (serialEventRun) serialEventRun();
 5f0:	20 97       	sbiw	r28, 0x00	; 0
 5f2:	e9 f3       	breq	.-6      	; 0x5ee <main+0xa>
 5f4:	3a de       	rcall	.-908    	; 0x26a <_Z14serialEventRunv>
 5f6:	fb cf       	rjmp	.-10     	; 0x5ee <main+0xa>

000005f8 <_ZN5Print5writeEPKhj>:
 5f8:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 5fa:	df 92       	push	r13
 5fc:	ef 92       	push	r14
 5fe:	ff 92       	push	r15
 600:	0f 93       	push	r16
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	6c 01       	movw	r12, r24
 60a:	7a 01       	movw	r14, r20
 60c:	8b 01       	movw	r16, r22
 60e:	c0 e0       	ldi	r28, 0x00	; 0
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	ce 15       	cp	r28, r14
 614:	df 05       	cpc	r29, r15
 616:	81 f0       	breq	.+32     	; 0x638 <_ZN5Print5writeEPKhj+0x40>
 618:	d8 01       	movw	r26, r16
 61a:	6d 91       	ld	r22, X+
 61c:	8d 01       	movw	r16, r26
 61e:	d6 01       	movw	r26, r12
 620:	ed 91       	ld	r30, X+
 622:	fc 91       	ld	r31, X
 624:	01 90       	ld	r0, Z+
 626:	f0 81       	ld	r31, Z
 628:	e0 2d       	mov	r30, r0
 62a:	c6 01       	movw	r24, r12
 62c:	19 95       	eicall
 62e:	89 2b       	or	r24, r25
 630:	11 f0       	breq	.+4      	; 0x636 <_ZN5Print5writeEPKhj+0x3e>
 632:	21 96       	adiw	r28, 0x01	; 1
 634:	ee cf       	rjmp	.-36     	; 0x612 <_ZN5Print5writeEPKhj+0x1a>
 636:	7e 01       	movw	r14, r28
 638:	c7 01       	movw	r24, r14
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	df 90       	pop	r13
 648:	cf 90       	pop	r12
 64a:	08 95       	ret

0000064c <_ZN5Print5writeEPKc>:
 64c:	61 15       	cp	r22, r1
 64e:	71 05       	cpc	r23, r1
 650:	79 f0       	breq	.+30     	; 0x670 <_ZN5Print5writeEPKc+0x24>
 652:	fb 01       	movw	r30, r22
 654:	01 90       	ld	r0, Z+
 656:	00 20       	and	r0, r0
 658:	e9 f7       	brne	.-6      	; 0x654 <_ZN5Print5writeEPKc+0x8>
 65a:	31 97       	sbiw	r30, 0x01	; 1
 65c:	af 01       	movw	r20, r30
 65e:	46 1b       	sub	r20, r22
 660:	57 0b       	sbc	r21, r23
 662:	dc 01       	movw	r26, r24
 664:	ed 91       	ld	r30, X+
 666:	fc 91       	ld	r31, X
 668:	02 80       	ldd	r0, Z+2	; 0x02
 66a:	f3 81       	ldd	r31, Z+3	; 0x03
 66c:	e0 2d       	mov	r30, r0
 66e:	19 94       	eijmp
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	08 95       	ret

00000676 <_ZN5Print5printEPKc>:
 676:	ea cf       	rjmp	.-44     	; 0x64c <_ZN5Print5writeEPKc>

00000678 <_ZN5Print5printEc>:
 678:	dc 01       	movw	r26, r24
 67a:	ed 91       	ld	r30, X+
 67c:	fc 91       	ld	r31, X
 67e:	01 90       	ld	r0, Z+
 680:	f0 81       	ld	r31, Z
 682:	e0 2d       	mov	r30, r0
 684:	19 94       	eijmp

00000686 <_ZN5Print11printNumberEmh>:
 686:	8f 92       	push	r8
 688:	9f 92       	push	r9
 68a:	af 92       	push	r10
 68c:	bf 92       	push	r11
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
 69e:	a1 97       	sbiw	r28, 0x21	; 33
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	f8 94       	cli
 6a4:	de bf       	out	0x3e, r29	; 62
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	cd bf       	out	0x3d, r28	; 61
 6aa:	7c 01       	movw	r14, r24
 6ac:	fa 01       	movw	r30, r20
 6ae:	cb 01       	movw	r24, r22
 6b0:	19 a2       	std	Y+33, r1	; 0x21
 6b2:	22 30       	cpi	r18, 0x02	; 2
 6b4:	08 f4       	brcc	.+2      	; 0x6b8 <_ZN5Print11printNumberEmh+0x32>
 6b6:	2a e0       	ldi	r18, 0x0A	; 10
 6b8:	8e 01       	movw	r16, r28
 6ba:	0f 5d       	subi	r16, 0xDF	; 223
 6bc:	1f 4f       	sbci	r17, 0xFF	; 255
 6be:	82 2e       	mov	r8, r18
 6c0:	91 2c       	mov	r9, r1
 6c2:	a1 2c       	mov	r10, r1
 6c4:	b1 2c       	mov	r11, r1
 6c6:	bf 01       	movw	r22, r30
 6c8:	a5 01       	movw	r20, r10
 6ca:	94 01       	movw	r18, r8
 6cc:	79 d1       	rcall	.+754    	; 0x9c0 <__udivmodsi4>
 6ce:	f9 01       	movw	r30, r18
 6d0:	ca 01       	movw	r24, r20
 6d2:	01 50       	subi	r16, 0x01	; 1
 6d4:	11 09       	sbc	r17, r1
 6d6:	6a 30       	cpi	r22, 0x0A	; 10
 6d8:	10 f4       	brcc	.+4      	; 0x6de <_ZN5Print11printNumberEmh+0x58>
 6da:	60 5d       	subi	r22, 0xD0	; 208
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <_ZN5Print11printNumberEmh+0x5a>
 6de:	69 5c       	subi	r22, 0xC9	; 201
 6e0:	d8 01       	movw	r26, r16
 6e2:	6c 93       	st	X, r22
 6e4:	23 2b       	or	r18, r19
 6e6:	24 2b       	or	r18, r20
 6e8:	25 2b       	or	r18, r21
 6ea:	69 f7       	brne	.-38     	; 0x6c6 <_ZN5Print11printNumberEmh+0x40>
 6ec:	b8 01       	movw	r22, r16
 6ee:	c7 01       	movw	r24, r14
 6f0:	ad df       	rcall	.-166    	; 0x64c <_ZN5Print5writeEPKc>
 6f2:	a1 96       	adiw	r28, 0x21	; 33
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	bf 90       	pop	r11
 70c:	af 90       	pop	r10
 70e:	9f 90       	pop	r9
 710:	8f 90       	pop	r8
 712:	08 95       	ret

00000714 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 714:	cf 92       	push	r12
 716:	df 92       	push	r13
 718:	ef 92       	push	r14
 71a:	ff 92       	push	r15
 71c:	0f 93       	push	r16
 71e:	1f 93       	push	r17
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
  if (base == 0) {
 724:	21 15       	cp	r18, r1
 726:	31 05       	cpc	r19, r1
 728:	81 f4       	brne	.+32     	; 0x74a <_ZN5Print5printEli+0x36>
    return write(n);
 72a:	dc 01       	movw	r26, r24
 72c:	ed 91       	ld	r30, X+
 72e:	fc 91       	ld	r31, X
 730:	01 90       	ld	r0, Z+
 732:	f0 81       	ld	r31, Z
 734:	e0 2d       	mov	r30, r0
 736:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	df 90       	pop	r13
 746:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 748:	19 94       	eijmp
  } else if (base == 10) {
 74a:	2a 30       	cpi	r18, 0x0A	; 10
 74c:	31 05       	cpc	r19, r1
 74e:	f1 f4       	brne	.+60     	; 0x78c <_ZN5Print5printEli+0x78>
    if (n < 0) {
 750:	77 ff       	sbrs	r23, 7
 752:	1b c0       	rjmp	.+54     	; 0x78a <_ZN5Print5printEli+0x76>
 754:	6a 01       	movw	r12, r20
 756:	7b 01       	movw	r14, r22
 758:	ec 01       	movw	r28, r24
      int t = print('-');
 75a:	6d e2       	ldi	r22, 0x2D	; 45
 75c:	8d df       	rcall	.-230    	; 0x678 <_ZN5Print5printEc>
 75e:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
 760:	44 27       	eor	r20, r20
 762:	55 27       	eor	r21, r21
 764:	ba 01       	movw	r22, r20
 766:	4c 19       	sub	r20, r12
 768:	5d 09       	sbc	r21, r13
 76a:	6e 09       	sbc	r22, r14
 76c:	7f 09       	sbc	r23, r15
 76e:	2a e0       	ldi	r18, 0x0A	; 10
 770:	ce 01       	movw	r24, r28
 772:	89 df       	rcall	.-238    	; 0x686 <_ZN5Print11printNumberEmh>
 774:	80 0f       	add	r24, r16
 776:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	ff 90       	pop	r15
 782:	ef 90       	pop	r14
 784:	df 90       	pop	r13
 786:	cf 90       	pop	r12
 788:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 78a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 79a:	cf 90       	pop	r12
 79c:	74 cf       	rjmp	.-280    	; 0x686 <_ZN5Print11printNumberEmh>

0000079e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 79e:	9a 01       	movw	r18, r20
  return print((long) n, base);
 7a0:	ab 01       	movw	r20, r22
 7a2:	77 0f       	add	r23, r23
 7a4:	66 0b       	sbc	r22, r22
 7a6:	77 0b       	sbc	r23, r23
 7a8:	b5 cf       	rjmp	.-150    	; 0x714 <_ZN5Print5printEli>

000007aa <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	8f 93       	push	r24
 7ba:	9f 93       	push	r25
 7bc:	af 93       	push	r26
 7be:	bf 93       	push	r27
 7c0:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <timer0_millis>
 7c4:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <timer0_millis+0x1>
 7c8:	a0 91 ba 02 	lds	r26, 0x02BA	; 0x8002ba <timer0_millis+0x2>
 7cc:	b0 91 bb 02 	lds	r27, 0x02BB	; 0x8002bb <timer0_millis+0x3>
 7d0:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <timer0_fract>
 7d4:	23 e0       	ldi	r18, 0x03	; 3
 7d6:	23 0f       	add	r18, r19
 7d8:	2d 37       	cpi	r18, 0x7D	; 125
 7da:	20 f4       	brcc	.+8      	; 0x7e4 <__vector_23+0x3a>
 7dc:	01 96       	adiw	r24, 0x01	; 1
 7de:	a1 1d       	adc	r26, r1
 7e0:	b1 1d       	adc	r27, r1
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <__vector_23+0x44>
 7e4:	26 e8       	ldi	r18, 0x86	; 134
 7e6:	23 0f       	add	r18, r19
 7e8:	02 96       	adiw	r24, 0x02	; 2
 7ea:	a1 1d       	adc	r26, r1
 7ec:	b1 1d       	adc	r27, r1
 7ee:	20 93 b7 02 	sts	0x02B7, r18	; 0x8002b7 <timer0_fract>
 7f2:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <timer0_millis>
 7f6:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <timer0_millis+0x1>
 7fa:	a0 93 ba 02 	sts	0x02BA, r26	; 0x8002ba <timer0_millis+0x2>
 7fe:	b0 93 bb 02 	sts	0x02BB, r27	; 0x8002bb <timer0_millis+0x3>
 802:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <timer0_overflow_count>
 806:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <timer0_overflow_count+0x1>
 80a:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <timer0_overflow_count+0x2>
 80e:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <timer0_overflow_count+0x3>
 812:	01 96       	adiw	r24, 0x01	; 1
 814:	a1 1d       	adc	r26, r1
 816:	b1 1d       	adc	r27, r1
 818:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <timer0_overflow_count>
 81c:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <timer0_overflow_count+0x1>
 820:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <timer0_overflow_count+0x2>
 824:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <timer0_overflow_count+0x3>
 828:	bf 91       	pop	r27
 82a:	af 91       	pop	r26
 82c:	9f 91       	pop	r25
 82e:	8f 91       	pop	r24
 830:	3f 91       	pop	r19
 832:	2f 91       	pop	r18
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <micros>:
 83e:	3f b7       	in	r19, 0x3f	; 63
 840:	f8 94       	cli
 842:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <timer0_overflow_count>
 846:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <timer0_overflow_count+0x1>
 84a:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <timer0_overflow_count+0x2>
 84e:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <timer0_overflow_count+0x3>
 852:	26 b5       	in	r18, 0x26	; 38
 854:	a8 9b       	sbis	0x15, 0	; 21
 856:	05 c0       	rjmp	.+10     	; 0x862 <micros+0x24>
 858:	2f 3f       	cpi	r18, 0xFF	; 255
 85a:	19 f0       	breq	.+6      	; 0x862 <micros+0x24>
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	a1 1d       	adc	r26, r1
 860:	b1 1d       	adc	r27, r1
 862:	3f bf       	out	0x3f, r19	; 63
 864:	ba 2f       	mov	r27, r26
 866:	a9 2f       	mov	r26, r25
 868:	98 2f       	mov	r25, r24
 86a:	88 27       	eor	r24, r24
 86c:	82 0f       	add	r24, r18
 86e:	91 1d       	adc	r25, r1
 870:	a1 1d       	adc	r26, r1
 872:	b1 1d       	adc	r27, r1
 874:	bc 01       	movw	r22, r24
 876:	cd 01       	movw	r24, r26
 878:	42 e0       	ldi	r20, 0x02	; 2
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	88 1f       	adc	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	4a 95       	dec	r20
 884:	d1 f7       	brne	.-12     	; 0x87a <micros+0x3c>
 886:	08 95       	ret

00000888 <delay>:
 888:	8f 92       	push	r8
 88a:	9f 92       	push	r9
 88c:	af 92       	push	r10
 88e:	bf 92       	push	r11
 890:	cf 92       	push	r12
 892:	df 92       	push	r13
 894:	ef 92       	push	r14
 896:	ff 92       	push	r15
 898:	6b 01       	movw	r12, r22
 89a:	7c 01       	movw	r14, r24
 89c:	d0 df       	rcall	.-96     	; 0x83e <micros>
 89e:	4b 01       	movw	r8, r22
 8a0:	5c 01       	movw	r10, r24
 8a2:	c1 14       	cp	r12, r1
 8a4:	d1 04       	cpc	r13, r1
 8a6:	e1 04       	cpc	r14, r1
 8a8:	f1 04       	cpc	r15, r1
 8aa:	f1 f0       	breq	.+60     	; 0x8e8 <delay+0x60>
 8ac:	88 d0       	rcall	.+272    	; 0x9be <yield>
 8ae:	c7 df       	rcall	.-114    	; 0x83e <micros>
 8b0:	dc 01       	movw	r26, r24
 8b2:	cb 01       	movw	r24, r22
 8b4:	88 19       	sub	r24, r8
 8b6:	99 09       	sbc	r25, r9
 8b8:	aa 09       	sbc	r26, r10
 8ba:	bb 09       	sbc	r27, r11
 8bc:	88 3e       	cpi	r24, 0xE8	; 232
 8be:	93 40       	sbci	r25, 0x03	; 3
 8c0:	a1 05       	cpc	r26, r1
 8c2:	b1 05       	cpc	r27, r1
 8c4:	70 f3       	brcs	.-36     	; 0x8a2 <delay+0x1a>
 8c6:	21 e0       	ldi	r18, 0x01	; 1
 8c8:	c2 1a       	sub	r12, r18
 8ca:	d1 08       	sbc	r13, r1
 8cc:	e1 08       	sbc	r14, r1
 8ce:	f1 08       	sbc	r15, r1
 8d0:	88 ee       	ldi	r24, 0xE8	; 232
 8d2:	88 0e       	add	r8, r24
 8d4:	83 e0       	ldi	r24, 0x03	; 3
 8d6:	98 1e       	adc	r9, r24
 8d8:	a1 1c       	adc	r10, r1
 8da:	b1 1c       	adc	r11, r1
 8dc:	c1 14       	cp	r12, r1
 8de:	d1 04       	cpc	r13, r1
 8e0:	e1 04       	cpc	r14, r1
 8e2:	f1 04       	cpc	r15, r1
 8e4:	21 f7       	brne	.-56     	; 0x8ae <delay+0x26>
 8e6:	dd cf       	rjmp	.-70     	; 0x8a2 <delay+0x1a>
 8e8:	ff 90       	pop	r15
 8ea:	ef 90       	pop	r14
 8ec:	df 90       	pop	r13
 8ee:	cf 90       	pop	r12
 8f0:	bf 90       	pop	r11
 8f2:	af 90       	pop	r10
 8f4:	9f 90       	pop	r9
 8f6:	8f 90       	pop	r8
 8f8:	08 95       	ret

000008fa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 8fa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 8fc:	84 b5       	in	r24, 0x24	; 36
 8fe:	82 60       	ori	r24, 0x02	; 2
 900:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 902:	84 b5       	in	r24, 0x24	; 36
 904:	81 60       	ori	r24, 0x01	; 1
 906:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 908:	85 b5       	in	r24, 0x25	; 37
 90a:	82 60       	ori	r24, 0x02	; 2
 90c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 90e:	85 b5       	in	r24, 0x25	; 37
 910:	81 60       	ori	r24, 0x01	; 1
 912:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 914:	ee e6       	ldi	r30, 0x6E	; 110
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	81 60       	ori	r24, 0x01	; 1
 91c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 91e:	e1 e8       	ldi	r30, 0x81	; 129
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 924:	80 81       	ld	r24, Z
 926:	82 60       	ori	r24, 0x02	; 2
 928:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 92a:	80 81       	ld	r24, Z
 92c:	81 60       	ori	r24, 0x01	; 1
 92e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 930:	e0 e8       	ldi	r30, 0x80	; 128
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	81 60       	ori	r24, 0x01	; 1
 938:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 93a:	e1 eb       	ldi	r30, 0xB1	; 177
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	84 60       	ori	r24, 0x04	; 4
 942:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 944:	e0 eb       	ldi	r30, 0xB0	; 176
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	80 81       	ld	r24, Z
 94a:	81 60       	ori	r24, 0x01	; 1
 94c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 94e:	e1 e9       	ldi	r30, 0x91	; 145
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	80 81       	ld	r24, Z
 954:	82 60       	ori	r24, 0x02	; 2
 956:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 958:	80 81       	ld	r24, Z
 95a:	81 60       	ori	r24, 0x01	; 1
 95c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 95e:	e0 e9       	ldi	r30, 0x90	; 144
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	81 60       	ori	r24, 0x01	; 1
 966:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 968:	e1 ea       	ldi	r30, 0xA1	; 161
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	82 60       	ori	r24, 0x02	; 2
 970:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 972:	80 81       	ld	r24, Z
 974:	81 60       	ori	r24, 0x01	; 1
 976:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 978:	e0 ea       	ldi	r30, 0xA0	; 160
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	81 60       	ori	r24, 0x01	; 1
 980:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 982:	e1 e2       	ldi	r30, 0x21	; 33
 984:	f1 e0       	ldi	r31, 0x01	; 1
 986:	80 81       	ld	r24, Z
 988:	82 60       	ori	r24, 0x02	; 2
 98a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 98c:	80 81       	ld	r24, Z
 98e:	81 60       	ori	r24, 0x01	; 1
 990:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 992:	e0 e2       	ldi	r30, 0x20	; 32
 994:	f1 e0       	ldi	r31, 0x01	; 1
 996:	80 81       	ld	r24, Z
 998:	81 60       	ori	r24, 0x01	; 1
 99a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 99c:	ea e7       	ldi	r30, 0x7A	; 122
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	80 81       	ld	r24, Z
 9a2:	84 60       	ori	r24, 0x04	; 4
 9a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 9a6:	80 81       	ld	r24, Z
 9a8:	82 60       	ori	r24, 0x02	; 2
 9aa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9ac:	80 81       	ld	r24, Z
 9ae:	81 60       	ori	r24, 0x01	; 1
 9b0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9b2:	80 81       	ld	r24, Z
 9b4:	80 68       	ori	r24, 0x80	; 128
 9b6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 9bc:	08 95       	ret

000009be <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 9be:	08 95       	ret

000009c0 <__udivmodsi4>:
 9c0:	a1 e2       	ldi	r26, 0x21	; 33
 9c2:	1a 2e       	mov	r1, r26
 9c4:	aa 1b       	sub	r26, r26
 9c6:	bb 1b       	sub	r27, r27
 9c8:	fd 01       	movw	r30, r26
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__udivmodsi4_ep>

000009cc <__udivmodsi4_loop>:
 9cc:	aa 1f       	adc	r26, r26
 9ce:	bb 1f       	adc	r27, r27
 9d0:	ee 1f       	adc	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	a2 17       	cp	r26, r18
 9d6:	b3 07       	cpc	r27, r19
 9d8:	e4 07       	cpc	r30, r20
 9da:	f5 07       	cpc	r31, r21
 9dc:	20 f0       	brcs	.+8      	; 0x9e6 <__udivmodsi4_ep>
 9de:	a2 1b       	sub	r26, r18
 9e0:	b3 0b       	sbc	r27, r19
 9e2:	e4 0b       	sbc	r30, r20
 9e4:	f5 0b       	sbc	r31, r21

000009e6 <__udivmodsi4_ep>:
 9e6:	66 1f       	adc	r22, r22
 9e8:	77 1f       	adc	r23, r23
 9ea:	88 1f       	adc	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	1a 94       	dec	r1
 9f0:	69 f7       	brne	.-38     	; 0x9cc <__udivmodsi4_loop>
 9f2:	60 95       	com	r22
 9f4:	70 95       	com	r23
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	9b 01       	movw	r18, r22
 9fc:	ac 01       	movw	r20, r24
 9fe:	bd 01       	movw	r22, r26
 a00:	cf 01       	movw	r24, r30
 a02:	08 95       	ret

00000a04 <__tablejump2__>:
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	88 1f       	adc	r24, r24
 a0a:	8b bf       	out	0x3b, r24	; 59
 a0c:	07 90       	elpm	r0, Z+
 a0e:	f6 91       	elpm	r31, Z
 a10:	e0 2d       	mov	r30, r0
 a12:	19 94       	eijmp

00000a14 <_exit>:
 a14:	f8 94       	cli

00000a16 <__stop_program>:
 a16:	ff cf       	rjmp	.-2      	; 0xa16 <__stop_program>
