
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094e  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038c  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000134  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001d87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_uart>:
}

unsigned uart_receive(void){
	while(!(UCSR0A) & (1<<RXEN0)){};
	PORTC = UDR0;
}
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  8e:	80 e2       	ldi	r24, 0x20	; 32
  90:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  9a:	08 95       	ret

0000009c <adc_init>:

//Initialize ADC
void adc_init(){
	ADMUX = (1<<REFS0);
  9c:	80 e4       	ldi	r24, 0x40	; 64
  9e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//Prescaler of 128
	ADCSRA  = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  a2:	87 e8       	ldi	r24, 0x87	; 135
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  a8:	08 95       	ret

000000aa <adc_read>:
}

//Read ADC value
uint16_t adc_read(uint8_t ch){
	ch &=0xf0;
	ADMUX |= ch;
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	98 2b       	or	r25, r24
  b4:	90 83       	st	Z, r25
	ADCSRA |=(1<<ADSC);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
  c0:	80 81       	ld	r24, Z
  c2:	86 fd       	sbrc	r24, 6
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <adc_read+0x16>
	return ADC;
  c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  ce:	08 95       	ret

000000d0 <led_init>:

void led_init(){
	DDRB |= (1<<PB5);
  d0:	25 9a       	sbi	0x04, 5	; 4
  d2:	08 95       	ret

000000d4 <main>:
}

int main ()
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	64 97       	sbiw	r28, 0x14	; 20
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
	uint16_t res;
	init_uart(MYUBRR);
  e8:	83 e3       	ldi	r24, 0x33	; 51
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 40 00 	call	0x80	; 0x80 <init_uart>
	adc_init();
  f0:	0e 94 4e 00 	call	0x9c	; 0x9c <adc_init>
	led_init();
  f4:	0e 94 68 00 	call	0xd0	; 0xd0 <led_init>
  f8:	7e 01       	movw	r14, r28
  fa:	85 e1       	ldi	r24, 0x15	; 21
  fc:	e8 0e       	add	r14, r24
  fe:	f1 1c       	adc	r15, r1

		for (int j=0; j<20;j++)
		{
			//printf(buffer);
			PORTD ^= (1<< PD7);
			UDR0 = buffer[j];
 100:	06 ec       	ldi	r16, 0xC6	; 198
 102:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t res;
	init_uart(MYUBRR);
	adc_init();
	led_init();
	while(1){
		res = adc_read(0);
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 55 00 	call	0xaa	; 0xaa <adc_read>
 10a:	6c 01       	movw	r12, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 10c:	4a e0       	ldi	r20, 0x0A	; 10
 10e:	be 01       	movw	r22, r28
 110:	6f 5f       	subi	r22, 0xFF	; 255
 112:	7f 4f       	sbci	r23, 0xFF	; 255
 114:	0e 94 a5 00 	call	0x14a	; 0x14a <__itoa_ncheck>
 118:	fe 01       	movw	r30, r28
 11a:	31 96       	adiw	r30, 0x01	; 1
		itoa (res,buffer,10);

		for (int j=0; j<20;j++)
		{
			//printf(buffer);
			PORTD ^= (1<< PD7);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	80 58       	subi	r24, 0x80	; 128
 120:	8b b9       	out	0x0b, r24	; 11
			UDR0 = buffer[j];
 122:	81 91       	ld	r24, Z+
 124:	d8 01       	movw	r26, r16
 126:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	9e e4       	ldi	r25, 0x4E	; 78
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x58>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x5e>
 132:	00 00       	nop
	while(1){
		res = adc_read(0);
		char buffer [20];
		itoa (res,buffer,10);

		for (int j=0; j<20;j++)
 134:	ee 15       	cp	r30, r14
 136:	ff 05       	cpc	r31, r15
 138:	89 f7       	brne	.-30     	; 0x11c <main+0x48>
			PORTD ^= (1<< PD7);
			UDR0 = buffer[j];
			_delay_ms(5);
		}
		//uart_transmit(res);
		if(res>=512){
 13a:	c1 14       	cp	r12, r1
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	d9 06       	cpc	r13, r25
 140:	10 f0       	brcs	.+4      	; 0x146 <main+0x72>
			PORTB |= (1<<PB5);
 142:	2d 9a       	sbi	0x05, 5	; 5
 144:	df cf       	rjmp	.-66     	; 0x104 <main+0x30>
			//_delay_ms(100);
		}else{
			PORTB &= ~(1<<PB5); 
 146:	2d 98       	cbi	0x05, 5	; 5
			//_delay_ms(100);
		}
	}
 148:	dd cf       	rjmp	.-70     	; 0x104 <main+0x30>

0000014a <__itoa_ncheck>:
 14a:	bb 27       	eor	r27, r27
 14c:	4a 30       	cpi	r20, 0x0A	; 10
 14e:	31 f4       	brne	.+12     	; 0x15c <__itoa_ncheck+0x12>
 150:	99 23       	and	r25, r25
 152:	22 f4       	brpl	.+8      	; 0x15c <__itoa_ncheck+0x12>
 154:	bd e2       	ldi	r27, 0x2D	; 45
 156:	90 95       	com	r25
 158:	81 95       	neg	r24
 15a:	9f 4f       	sbci	r25, 0xFF	; 255
 15c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__utoa_common>

00000160 <__utoa_ncheck>:
 160:	bb 27       	eor	r27, r27

00000162 <__utoa_common>:
 162:	fb 01       	movw	r30, r22
 164:	55 27       	eor	r21, r21
 166:	aa 27       	eor	r26, r26
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	aa 1f       	adc	r26, r26
 16e:	a4 17       	cp	r26, r20
 170:	10 f0       	brcs	.+4      	; 0x176 <__utoa_common+0x14>
 172:	a4 1b       	sub	r26, r20
 174:	83 95       	inc	r24
 176:	50 51       	subi	r21, 0x10	; 16
 178:	b9 f7       	brne	.-18     	; 0x168 <__utoa_common+0x6>
 17a:	a0 5d       	subi	r26, 0xD0	; 208
 17c:	aa 33       	cpi	r26, 0x3A	; 58
 17e:	08 f0       	brcs	.+2      	; 0x182 <__utoa_common+0x20>
 180:	a9 5d       	subi	r26, 0xD9	; 217
 182:	a1 93       	st	Z+, r26
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	79 f7       	brne	.-34     	; 0x166 <__utoa_common+0x4>
 188:	b1 11       	cpse	r27, r1
 18a:	b1 93       	st	Z+, r27
 18c:	11 92       	st	Z+, r1
 18e:	cb 01       	movw	r24, r22
 190:	0c 94 ca 00 	jmp	0x194	; 0x194 <strrev>

00000194 <strrev>:
 194:	dc 01       	movw	r26, r24
 196:	fc 01       	movw	r30, r24
 198:	67 2f       	mov	r22, r23
 19a:	71 91       	ld	r23, Z+
 19c:	77 23       	and	r23, r23
 19e:	e1 f7       	brne	.-8      	; 0x198 <strrev+0x4>
 1a0:	32 97       	sbiw	r30, 0x02	; 2
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <strrev+0x18>
 1a4:	7c 91       	ld	r23, X
 1a6:	6d 93       	st	X+, r22
 1a8:	70 83       	st	Z, r23
 1aa:	62 91       	ld	r22, -Z
 1ac:	ae 17       	cp	r26, r30
 1ae:	bf 07       	cpc	r27, r31
 1b0:	c8 f3       	brcs	.-14     	; 0x1a4 <strrev+0x10>
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
