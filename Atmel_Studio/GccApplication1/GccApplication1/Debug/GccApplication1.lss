
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c1  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058e  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a4  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	DDRD = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		int i=0;
		for(i;i<8;i++){
			PORTD |= (1<<(PD0+i));
  70:	61 e0       	ldi	r22, 0x01	; 1
  72:	70 e0       	ldi	r23, 0x00	; 0
int main(void)
{
	DDRD = 0xff;
    while (1) 
    {
		int i=0;
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
		for(i;i<8;i++){
			PORTD |= (1<<(PD0+i));
  78:	42 b3       	in	r20, 0x12	; 18
  7a:	cb 01       	movw	r24, r22
  7c:	02 2e       	mov	r0, r18
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	0a 94       	dec	r0
  86:	e2 f7       	brpl	.-8      	; 0x80 <main+0x14>
  88:	94 2f       	mov	r25, r20
  8a:	98 2b       	or	r25, r24
  8c:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	e7 ea       	ldi	r30, 0xA7	; 167
  90:	f1 e6       	ldi	r31, 0x61	; 97
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
			_delay_ms(100);
			PORTD &= ~(1<<(PD0+i));
  9a:	92 b3       	in	r25, 0x12	; 18
  9c:	80 95       	com	r24
  9e:	89 23       	and	r24, r25
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	87 ea       	ldi	r24, 0xA7	; 167
  a4:	91 e6       	ldi	r25, 0x61	; 97
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
{
	DDRD = 0xff;
    while (1) 
    {
		int i=0;
		for(i;i<8;i++){
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	28 30       	cpi	r18, 0x08	; 8
  b4:	31 05       	cpc	r19, r1
  b6:	01 f7       	brne	.-64     	; 0x78 <main+0xc>
  b8:	27 e0       	ldi	r18, 0x07	; 7
  ba:	30 e0       	ldi	r19, 0x00	; 0
			PORTD &= ~(1<<(PD0+i));
			_delay_ms(100);
		}
		int j=7;
		for(j;j>=0;j--){
			PORTD |= (1<<(PD0+j));
  bc:	42 b3       	in	r20, 0x12	; 18
  be:	cb 01       	movw	r24, r22
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x5c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <main+0x58>
  cc:	94 2f       	mov	r25, r20
  ce:	98 2b       	or	r25, r24
  d0:	92 bb       	out	0x12, r25	; 18
  d2:	e7 ea       	ldi	r30, 0xA7	; 167
  d4:	f1 e6       	ldi	r31, 0x61	; 97
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x6a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
			_delay_ms(100);
			PORTD &= ~(1<<(PD0+j));
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	80 95       	com	r24
  e2:	89 23       	and	r24, r25
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	87 ea       	ldi	r24, 0xA7	; 167
  e8:	91 e6       	ldi	r25, 0x61	; 97
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x7e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x84>
  f0:	00 00       	nop
			_delay_ms(100);
			PORTD &= ~(1<<(PD0+i));
			_delay_ms(100);
		}
		int j=7;
		for(j;j>=0;j--){
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	31 09       	sbc	r19, r1
  f6:	10 f7       	brcc	.-60     	; 0xbc <main+0x50>
  f8:	bd cf       	rjmp	.-134    	; 0x74 <main+0x8>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
